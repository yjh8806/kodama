{"ast":null,"code":"import _toConsumableArray from\"/Users/frankie/sparta/hanghae_react/magazine_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Users/frankie/sparta/hanghae_react/magazine_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/frankie/sparta/hanghae_react/magazine_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var _handleActions;import{createAction,handleActions}from\"redux-actions\";import{produce}from\"immer\";import{firestore,storage}from\"../../shared/firebase\";import moment from\"moment\";import{actionCreators as imageActions}from\"./image\";import{actionCreators as likeActions}from\"./like\";var SET_POST=\"SET_POST\";var ADD_POST=\"ADD_POST\";var EDIT_POST=\"EDIT_POST\";var DELETE_POST=\"DELETE_POST\";var LOADING=\"LOADING\";var SET_LIKE=\"SET_LIKE\";var setPost=createAction(SET_POST,function(post_list,paging){return{post_list:post_list,paging:paging};});var addPost=createAction(ADD_POST,function(post){return{post:post};});var editPost=createAction(EDIT_POST,function(post_id,post){return{post_id:post_id,post:post};});var deletePost=createAction(DELETE_POST,function(post_id){return{post_id:post_id};});var loading=createAction(LOADING,function(is_loading){return{is_loading:is_loading};});var initialState={list:[],paging:{start:null,next:null,size:3},is_loading:false};// 포스트에 들어가야만 하는 기본 정보를 미리 하나 만들어요! (매번 적기는 귀찮으니까..!)\n// layout_type : a, b, c\n//  - a : 텍스트가 위, 이미지가 아래인 레이아웃\n//  - b : 텍스트가 좌측, 이미지가 우측인 레이아웃\n//  - c : 텍스트가 우측, 이미지가 좌측인 레이아웃\n// image_url : 이미지 주소\n// like_cnt : 좋아요 갯수\n// insert_dt : 작성일시\nvar initialPost={image_url:\"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",contents:\"\",like_cnt:0,layout_type:\"a\",insert_dt:moment().format(\"YYYY-MM-DD HH:mm:ss\")};// 게시글 수정하기\nvar editPostFB=function editPostFB(){var post_id=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var post=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return function(dispatch,getState,_ref){var history=_ref.history;if(!post_id){console.log(\"게시물 정보가 없어요!\");return;}// 프리뷰 이미지를 가져옵니다.\nvar _image=getState().image.preview;// 수정하려는 게시글이 게시글 목록에서 몇 번째에 있나 확인합니다.\nvar _post_idx=getState().post.list.findIndex(function(p){return p.id===post_id;});// 수정하려는 게시글 정보를 가져옵니다. (수정 전 정보겠죠!)\nvar _post=getState().post.list[_post_idx];// 아래의 주석을 풀고 확인해보세요!\n// console.log(_post);\n// 파이어스토어에서 콜렉션 선택하기\nvar postDB=firestore.collection(\"post\");// 현재 프리뷰의 이미지와 게시글 정보에 있는 이미지가 같은 지 확인합니다.\n// 같다면 이미지 업로드는 할 필요 없겠죠!\nif(_image===_post.image_url){// 게시글 정보를 수정해요!\npostDB.doc(post_id).update(post).then(function(doc){dispatch(editPost(post_id,_objectSpread({},post)));//   프리뷰는 이제 null로 바꿔줍니다!\ndispatch(imageActions.setPreview(null));window.alert(\"게시글 수정 완료!\");history.replace(\"/\");});return;}else{// 유저 정보를 가져와요 (유저 id!)\nvar user_id=getState().user.user.uid;// 이미지를 data_url 방식으로 업로드하도록 준비!\nvar _upload=storage.ref(\"images/\".concat(user_id,\"_\").concat(new Date().getTime())).putString(_image,\"data_url\");// 이미지를 업로드하고,\n_upload.then(function(snapshot){//   업로드한 뒤 링크를 가져옵니다. (업로드한 이미지의 경로를 가져와요.)\nsnapshot.ref.getDownloadURL().then(function(url){//   아래 주석을 풀고 경로를 확인해보세요 :)\n// console.log(url);\nreturn url;}).then(function(url){// 경로를 가지고 게시글 정보를 수정해줍니다.\npostDB.doc(post_id).update(_objectSpread(_objectSpread({},post),{},{image_url:url})).then(function(doc){//   리덕스에도 수정한 정보를 넣어줘요.\ndispatch(editPost(post_id,_objectSpread(_objectSpread({},post),{},{image_url:url})));//   프리뷰는 이제 null로 바꿔줍니다!\ndispatch(imageActions.setPreview(null));// 수정이 끝났으니, / 경로로 돌아갑니다.\nhistory.replace(\"/\");});}).catch(function(err){window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");console.log(\"앗! 이미지 업로드에 문제가 있어요!\",err);});});}};};// 게시글 추가하기\nvar addPostFB=function addPostFB(){var contents=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";var layout_type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"a\";return function(dispatch,getState,_ref2){var history=_ref2.history;//  파이어스토어에서 콜렉션부터 잡아줍니다.\nvar postDB=firestore.collection(\"post\");// 게시글 작성자 (로그인한 유저겠죠!) 정보를 가져와요.\nvar _user=getState().user.user;// 유저 정보를 꾸려주고,\nvar user_info={user_name:_user.user_name,user_id:_user.uid,user_profile:_user.user_profile};// 게시글 정보도 꾸려줘요.\nvar _post=_objectSpread(_objectSpread({},initialPost),{},{contents:contents,layout_type:layout_type,insert_dt:moment().format(\"YYYY-MM-DD HH:mm:ss\")});// 이미지도 가져옵니다.\nvar _image=getState().image.preview;// 만약 이미지가 없으면? 경고를 띄워주고 업로드하지 않아요!\nif(!_image){window.alert(\"이미지가 필요해요!\");return;}// 이미지 업로드 먼저! (이미지 업로드가 실패하면 게시글도 업로드 하지 않게!)\nvar _upload=storage.ref(\"images/\".concat(user_info.user_id,\"_\").concat(new Date().getTime())).putString(_image,\"data_url\");_upload.then(function(snapshot){snapshot.ref.getDownloadURL().then(function(url){return url;}).then(function(url){// 이미지 업로드가 무사히 잘 끝났다면, 이제 게시글 정보를 파이어스토어에 넣어줍니다.\n// 주의! 파이어스토어에는 리덕스에서 관리하는 것과 조금 다르게 게시글 1개 정보를 관리할거예요.\npostDB.add(_objectSpread(_objectSpread(_objectSpread({},user_info),_post),{},{image_url:url})).then(function(doc){var post=_objectSpread(_objectSpread({user_info:user_info},_post),{},{id:doc.id,image_url:url});dispatch(addPost(post));window.alert(\"게시글 작성 완료!\");history.replace(\"/\");//   프리뷰는 이제 null로 바꿔줍니다!\ndispatch(imageActions.setPreview(null));}).catch(function(err){window.alert(\"앗! 포스트 작성에 문제가 있어요!\");console.log(\"post 작성에 실패했어요!\",err);});}).catch(function(err){window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");console.log(\"앗! 이미지 업로드에 문제가 있어요!\",err);});});};};// 게시글 가져오기\nvar getPostFB=function getPostFB(){var start=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;return function(dispatch,getState,_ref3){var history=_ref3.history;//   가장 먼저 페이징 정보를 가져와요.\nvar _paging=getState().post.paging;// 시작점이 있고, 다음 게시글이 없다면? 더 가져올 게 없다는 뜻이니 return!\nif(_paging.start&&!_paging.next){return;}// 가져오기 중일 때는 loading을 true로 바꿔줍니다.\n// 연속해서 계속 불러오는 걸 방지하기 위함입니다.\ndispatch(loading(true));// 파이어스토어에서 post 콜렉션을 먼저 잡아주고,\nvar postDB=firestore.collection(\"post\");// 쿼리를 작성해요!\n// 작성일 기준으로 역순 정렬할거예요.\n// +) asc, desc를 왔다갔다 하면서 정렬을 바꿔보세요!\nvar query=postDB.orderBy(\"insert_dt\",\"desc\");// 만약 시작점이 있다면? (start는 매개변수로 가져오는 걸 잊으면 안됩니다! -> getPostFB를 부를 때는? paging의 next 값을 start로 넘겨주겠죠!)\nif(start){// 쿼리에 몇번째 게시글부터 가져올 지, 시작점 정보를 추가해줍니다.\nquery=query.startAt(start);}// 우리가 미리 지정한 사이즈(갯수)보다 1개 더 많이 가져올거예요.\n// 그래야 next에 무언가를 넣어서 다음에 또 불러올 게 있나 없나 판단할 수 있어요.\nquery.limit(size+1).get().then(function(docs){var post_list=[];// 페이징 정보를 만들어줘요.\n// start는 지금 가져온 데이터의 첫번째 걸로,\n// next는 가져온 데이터의 길이를 보고 지정 사이즈보다 +1개면 마지막 데이터를,\n// 지금 사이즈와 같거나 작으면 null을 넣어줘요.\nvar paging={start:docs.docs[0],next:docs.docs.length===size+1?docs.docs[docs.docs.length-1]:null,size:size};// 이제 파이어스토어에서 가져온 데이터를 리덕스에 넣기 좋게 만들어요!\ndocs.forEach(function(doc){var _post=doc.data();// reduce로 데이터를 정제해요!\n// reduce 사용법이 익숙하지 않으시다면 reduce 사용법 검색해보기!\n//  게시글 하나는 딕셔너리 형태예요.\n// 이 딕셔너리 형태 데이터의 키만 가지고 배열을 만들어 reduce를 돌립니다.\nvar post=Object.keys(_post).reduce(function(acc,cur){// acc는 누적 값, cur은 현재 값이에요.\n// 현재 값(key 값 중 하나겠죠!)에 user_가 들어있다면?\nif(cur.indexOf(\"user_\")!==-1){//   user_info에 현재 키값과 현재 키를 사용해 가져온 밸류를 누적 딕셔너리에 추가해줍니다.\nreturn _objectSpread(_objectSpread({},acc),{},{user_info:_objectSpread(_objectSpread({},acc.user_info),{},_defineProperty({},cur,_post[cur]))});}//   user_가 없다면? 누적 딕셔너리에 바로 넣어주기!\nreturn _objectSpread(_objectSpread({},acc),{},_defineProperty({},cur,_post[cur]));},{id:doc.id,user_info:{}});//   정제한 데이터를 post_list에 넣어줘요.\npost_list.push(post);});// 마지막 1개는 빼줘요! (다음 번 리스트에 있어야할 값이니까요!)\nif(paging.next){post_list.pop();}// post_list를 확인해봅시다!\n// console.log(post_list);\n// 이제 게시글 목록을 리덕스에 넣어줍시다!\ndispatch(setPost(post_list,paging));});};};// 게시글 하나만 가져오기\n// 상세페이지 등에 바로 접근할 때를 대비해서 게시글 하나만 가져오는 함수도 만들어요.\nvar getOnePostFB=function getOnePostFB(id){return function(dispatch,getState,_ref4){var history=_ref4.history;var postDB=firestore.collection(\"post\");postDB.doc(id).get().then(function(doc){var _post=doc.data();var post=Object.keys(_post).reduce(function(acc,cur){if(cur.indexOf(\"user_\")!==-1){return _objectSpread(_objectSpread({},acc),{},{user_info:_objectSpread(_objectSpread({},acc.user_info),{},_defineProperty({},cur,_post[cur]))});}return _objectSpread(_objectSpread({},acc),{},_defineProperty({},cur,_post[cur]));},{id:doc.id,user_info:{}});// 하나를 가져오지만, 게시글 목록은 배열이잖아요! 배열 형태에 맞게 []로 싸줍니다.\ndispatch(setPost([post]));});};};// 게시글 삭제하기\nvar deletePostFB=function deletePostFB(id){return function(dispatch,getState,_ref5){var history=_ref5.history;// id가 없으면 return!\nif(!id){window.alert(\"삭제할 수 없는 게시글이에요!\");return;}var postDB=firestore.collection(\"post\");// 게시글 id로 선택해서 삭제하기!(글 삭제하면 좋아요도 삭제 하야함!! DB 쓸데 없는 공간차지!)\npostDB.doc(id).delete().then(function(res){dispatch(deletePost(id));history.replace(\"/\");}).catch(function(err){console.log(err);});};};// 리듀서\nexport default handleActions((_handleActions={},_defineProperty(_handleActions,SET_POST,function(state,action){return produce(state,function(draft){var _draft$list;//   데이터를 기존 데이터에 추가해요.\n(_draft$list=draft.list).push.apply(_draft$list,_toConsumableArray(action.payload.post_list));draft.list=draft.list.reduce(function(acc,cur){if(acc.findIndex(function(a){return a.id===cur.id;})===-1){return[].concat(_toConsumableArray(acc),[cur]);}else{acc[acc.findIndex(function(a){return a.id===cur.id;})]=cur;return acc;}},[]);// 페이징도 넣어줍니다.\nif(action.payload.paging){draft.paging=action.payload.paging;}// 리듀서에 기록할 때는 이미 로딩이 끝났겠죠! 여기에서 false로 바꿔줘요.\n// 액션을 따로 호출해도 좋지만, 무조건 is_loading이 false 되는 지점에서는 굳이 액션을 두번 일으키기 보단\n// 이런 식으로 바로 바꿔주는 게 좋아요.\ndraft.is_loading=false;});}),_defineProperty(_handleActions,ADD_POST,function(state,action){return produce(state,function(draft){// 데이터를 배열 맨 앞에 넣어줍니다.\ndraft.list.unshift(action.payload.post);});}),_defineProperty(_handleActions,EDIT_POST,function(state,action){return produce(state,function(draft){// 배열의 몇 번째에 있는 지 찾습니다.\nvar idx=draft.list.findIndex(function(p){return p.id===action.payload.post_id;});// 해당 위치에 넣어줍니다.\ndraft.list[idx]=_objectSpread(_objectSpread({},draft.list[idx]),action.payload.post);});}),_defineProperty(_handleActions,DELETE_POST,function(state,action){return produce(state,function(draft){var idx=draft.list.findIndex(function(p){return p.id===action.payload.post_id;});if(idx!==-1){// 배열에서 idx 위치의 요소 1개를 지웁니다.\ndraft.list.splice(idx,1);}});}),_defineProperty(_handleActions,LOADING,function(state,action){return produce(state,function(draft){//   데이터를 가져오는 중인 지 여부를 작성합니다.\ndraft.is_loading=action.payload.is_loading;});}),_handleActions),initialState);var actionCreators={setPost:setPost,addPost:addPost,editPost:editPost,getPostFB:getPostFB,addPostFB:addPostFB,editPostFB:editPostFB,getOnePostFB:getOnePostFB,deletePostFB:deletePostFB};export{actionCreators};","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","likeActions","SET_POST","ADD_POST","EDIT_POST","DELETE_POST","LOADING","SET_LIKE","setPost","post_list","paging","addPost","post","editPost","post_id","deletePost","loading","is_loading","initialState","list","start","next","size","initialPost","image_url","contents","like_cnt","layout_type","insert_dt","format","editPostFB","dispatch","getState","history","console","log","_image","image","preview","_post_idx","findIndex","p","id","_post","postDB","collection","doc","update","then","setPreview","window","alert","replace","user_id","user","uid","_upload","ref","Date","getTime","putString","snapshot","getDownloadURL","url","catch","err","addPostFB","_user","user_info","user_name","user_profile","add","getPostFB","_paging","query","orderBy","startAt","limit","get","docs","length","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","pop","getOnePostFB","deletePostFB","delete","res","state","action","draft","payload","a","unshift","idx","splice"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport moment from \"moment\";\n\nimport { actionCreators as imageActions } from \"./image\";\nimport { actionCreators as likeActions } from \"./like\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DELETE_POST = \"DELETE_POST\";\nconst LOADING = \"LOADING\";\nconst SET_LIKE = \"SET_LIKE\";\n\nconst setPost = createAction(SET_POST, (post_list, paging) => ({\n  post_list,\n  paging,\n}));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post,\n}));\nconst deletePost = createAction(DELETE_POST, (post_id) => ({ post_id }));\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: [],\n  paging: { start: null, next: null, size: 3 },\n  is_loading: false,\n};\n\n// 포스트에 들어가야만 하는 기본 정보를 미리 하나 만들어요! (매번 적기는 귀찮으니까..!)\n// layout_type : a, b, c\n//  - a : 텍스트가 위, 이미지가 아래인 레이아웃\n//  - b : 텍스트가 좌측, 이미지가 우측인 레이아웃\n//  - c : 텍스트가 우측, 이미지가 좌측인 레이아웃\n// image_url : 이미지 주소\n// like_cnt : 좋아요 갯수\n// insert_dt : 작성일시\nconst initialPost = {\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"\",\n  like_cnt: 0,\n  layout_type: \"a\",\n  insert_dt: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n};\n\n// 게시글 수정하기\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, { history }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    }\n\n    // 프리뷰 이미지를 가져옵니다.\n    const _image = getState().image.preview;\n\n    // 수정하려는 게시글이 게시글 목록에서 몇 번째에 있나 확인합니다.\n    const _post_idx = getState().post.list.findIndex((p) => p.id === post_id);\n    // 수정하려는 게시글 정보를 가져옵니다. (수정 전 정보겠죠!)\n    const _post = getState().post.list[_post_idx];\n    // 아래의 주석을 풀고 확인해보세요!\n    // console.log(_post);\n\n    // 파이어스토어에서 콜렉션 선택하기\n    const postDB = firestore.collection(\"post\");\n\n    // 현재 프리뷰의 이미지와 게시글 정보에 있는 이미지가 같은 지 확인합니다.\n    // 같다면 이미지 업로드는 할 필요 없겠죠!\n    if (_image === _post.image_url) {\n      // 게시글 정보를 수정해요!\n      postDB\n        .doc(post_id)\n        .update(post)\n        .then((doc) => {\n          dispatch(editPost(post_id, { ...post }));\n          //   프리뷰는 이제 null로 바꿔줍니다!\n          dispatch(imageActions.setPreview(null));\n          window.alert(\"게시글 수정 완료!\");\n          history.replace(\"/\");\n        });\n      return;\n    } else {\n      // 유저 정보를 가져와요 (유저 id!)\n      const user_id = getState().user.user.uid;\n      // 이미지를 data_url 방식으로 업로드하도록 준비!\n      const _upload = storage\n        .ref(`images/${user_id}_${new Date().getTime()}`)\n        .putString(_image, \"data_url\");\n\n      // 이미지를 업로드하고,\n      _upload.then((snapshot) => {\n        //   업로드한 뒤 링크를 가져옵니다. (업로드한 이미지의 경로를 가져와요.)\n        snapshot.ref\n          .getDownloadURL()\n          .then((url) => {\n            //   아래 주석을 풀고 경로를 확인해보세요 :)\n            // console.log(url);\n\n            return url;\n          })\n          .then((url) => {\n            // 경로를 가지고 게시글 정보를 수정해줍니다.\n            postDB\n              .doc(post_id)\n              .update({ ...post, image_url: url })\n              .then((doc) => {\n                //   리덕스에도 수정한 정보를 넣어줘요.\n                dispatch(editPost(post_id, { ...post, image_url: url }));\n                //   프리뷰는 이제 null로 바꿔줍니다!\n                dispatch(imageActions.setPreview(null));\n                // 수정이 끝났으니, / 경로로 돌아갑니다.\n                history.replace(\"/\");\n              });\n          })\n          .catch((err) => {\n            window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n            console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n          });\n      });\n    }\n  };\n};\n\n// 게시글 추가하기\nconst addPostFB = (contents = \"\", layout_type = \"a\") => {\n  return function (dispatch, getState, { history }) {\n    //  파이어스토어에서 콜렉션부터 잡아줍니다.\n    const postDB = firestore.collection(\"post\");\n\n    // 게시글 작성자 (로그인한 유저겠죠!) 정보를 가져와요.\n    const _user = getState().user.user;\n\n    // 유저 정보를 꾸려주고,\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile,\n    };\n\n    // 게시글 정보도 꾸려줘요.\n    const _post = {\n      ...initialPost,\n      contents: contents,\n      layout_type: layout_type,\n      insert_dt: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n    };\n\n    // 이미지도 가져옵니다.\n    const _image = getState().image.preview;\n\n    // 만약 이미지가 없으면? 경고를 띄워주고 업로드하지 않아요!\n    if (!_image) {\n      window.alert(\"이미지가 필요해요!\");\n      return;\n    }\n    // 이미지 업로드 먼저! (이미지 업로드가 실패하면 게시글도 업로드 하지 않게!)\n    const _upload = storage\n      .ref(`images/${user_info.user_id}_${new Date().getTime()}`)\n      .putString(_image, \"data_url\");\n\n    _upload.then((snapshot) => {\n      snapshot.ref\n        .getDownloadURL()\n        .then((url) => {\n          return url;\n        })\n        .then((url) => {\n          // 이미지 업로드가 무사히 잘 끝났다면, 이제 게시글 정보를 파이어스토어에 넣어줍니다.\n          // 주의! 파이어스토어에는 리덕스에서 관리하는 것과 조금 다르게 게시글 1개 정보를 관리할거예요.\n          postDB\n            .add({ ...user_info, ..._post, image_url: url })\n            .then((doc) => {\n              let post = { user_info, ..._post, id: doc.id, image_url: url };\n              dispatch(addPost(post));\n              window.alert(\"게시글 작성 완료!\");\n              history.replace(\"/\");\n\n              //   프리뷰는 이제 null로 바꿔줍니다!\n              dispatch(imageActions.setPreview(null));\n            })\n            .catch((err) => {\n              window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n              console.log(\"post 작성에 실패했어요!\", err);\n            });\n        })\n        .catch((err) => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n    });\n  };\n};\n\n// 게시글 가져오기\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, { history }) {\n    //   가장 먼저 페이징 정보를 가져와요.\n    let _paging = getState().post.paging;\n\n    // 시작점이 있고, 다음 게시글이 없다면? 더 가져올 게 없다는 뜻이니 return!\n    if (_paging.start && !_paging.next) {\n      return;\n    }\n\n    // 가져오기 중일 때는 loading을 true로 바꿔줍니다.\n    // 연속해서 계속 불러오는 걸 방지하기 위함입니다.\n    dispatch(loading(true));\n\n    // 파이어스토어에서 post 콜렉션을 먼저 잡아주고,\n    const postDB = firestore.collection(\"post\");\n\n    // 쿼리를 작성해요!\n    // 작성일 기준으로 역순 정렬할거예요.\n    // +) asc, desc를 왔다갔다 하면서 정렬을 바꿔보세요!\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n    // 만약 시작점이 있다면? (start는 매개변수로 가져오는 걸 잊으면 안됩니다! -> getPostFB를 부를 때는? paging의 next 값을 start로 넘겨주겠죠!)\n    if (start) {\n      // 쿼리에 몇번째 게시글부터 가져올 지, 시작점 정보를 추가해줍니다.\n      query = query.startAt(start);\n    }\n\n    // 우리가 미리 지정한 사이즈(갯수)보다 1개 더 많이 가져올거예요.\n    // 그래야 next에 무언가를 넣어서 다음에 또 불러올 게 있나 없나 판단할 수 있어요.\n    query\n      .limit(size + 1)\n      .get()\n      .then((docs) => {\n        let post_list = [];\n\n        // 페이징 정보를 만들어줘요.\n        // start는 지금 가져온 데이터의 첫번째 걸로,\n        // next는 가져온 데이터의 길이를 보고 지정 사이즈보다 +1개면 마지막 데이터를,\n        // 지금 사이즈와 같거나 작으면 null을 넣어줘요.\n        let paging = {\n          start: docs.docs[0],\n          next:\n            docs.docs.length === size + 1\n              ? docs.docs[docs.docs.length - 1]\n              : null,\n          size: size,\n        };\n\n        // 이제 파이어스토어에서 가져온 데이터를 리덕스에 넣기 좋게 만들어요!\n        docs.forEach((doc) => {\n          let _post = doc.data();\n\n          // reduce로 데이터를 정제해요!\n          // reduce 사용법이 익숙하지 않으시다면 reduce 사용법 검색해보기!\n          //  게시글 하나는 딕셔너리 형태예요.\n          // 이 딕셔너리 형태 데이터의 키만 가지고 배열을 만들어 reduce를 돌립니다.\n          let post = Object.keys(_post).reduce(\n            (acc, cur) => {\n              // acc는 누적 값, cur은 현재 값이에요.\n              // 현재 값(key 값 중 하나겠죠!)에 user_가 들어있다면?\n              if (cur.indexOf(\"user_\") !== -1) {\n                //   user_info에 현재 키값과 현재 키를 사용해 가져온 밸류를 누적 딕셔너리에 추가해줍니다.\n                return {\n                  ...acc,\n                  user_info: { ...acc.user_info, [cur]: _post[cur] },\n                };\n              }\n\n              //   user_가 없다면? 누적 딕셔너리에 바로 넣어주기!\n              return { ...acc, [cur]: _post[cur] };\n            },\n            { id: doc.id, user_info: {} }\n          );\n\n          //   정제한 데이터를 post_list에 넣어줘요.\n          post_list.push(post);\n        });\n\n        // 마지막 1개는 빼줘요! (다음 번 리스트에 있어야할 값이니까요!)\n        if (paging.next) {\n          post_list.pop();\n        }\n\n        // post_list를 확인해봅시다!\n        // console.log(post_list);\n\n        // 이제 게시글 목록을 리덕스에 넣어줍시다!\n        dispatch(setPost(post_list, paging));\n      });\n  };\n};\n\n// 게시글 하나만 가져오기\n// 상세페이지 등에 바로 접근할 때를 대비해서 게시글 하나만 가져오는 함수도 만들어요.\nconst getOnePostFB = (id) => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n    postDB\n      .doc(id)\n      .get()\n      .then((doc) => {\n        let _post = doc.data();\n        let post = Object.keys(_post).reduce(\n          (acc, cur) => {\n            if (cur.indexOf(\"user_\") !== -1) {\n              return {\n                ...acc,\n                user_info: { ...acc.user_info, [cur]: _post[cur] },\n              };\n            }\n            return { ...acc, [cur]: _post[cur] };\n          },\n          { id: doc.id, user_info: {} }\n        );\n\n        // 하나를 가져오지만, 게시글 목록은 배열이잖아요! 배열 형태에 맞게 []로 싸줍니다.\n        dispatch(setPost([post]));\n      });\n  };\n};\n\n// 게시글 삭제하기\nconst deletePostFB = (id) => {\n  return function (dispatch, getState, { history }) {\n    // id가 없으면 return!\n    if (!id) {\n      window.alert(\"삭제할 수 없는 게시글이에요!\");\n      return;\n    }\n\n    const postDB = firestore.collection(\"post\");\n\n    // 게시글 id로 선택해서 삭제하기!(글 삭제하면 좋아요도 삭제 하야함!! DB 쓸데 없는 공간차지!)\n    postDB\n      .doc(id)\n      .delete()\n      .then((res) => {\n        dispatch(deletePost(id));\n        history.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 리듀서\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        //   데이터를 기존 데이터에 추가해요.\n        draft.list.push(...action.payload.post_list);\n\n        draft.list = draft.list.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.id === cur.id) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.id === cur.id)] = cur;\n            return acc;\n          }\n        }, []);\n\n        // 페이징도 넣어줍니다.\n        if (action.payload.paging) {\n          draft.paging = action.payload.paging;\n        }\n\n        // 리듀서에 기록할 때는 이미 로딩이 끝났겠죠! 여기에서 false로 바꿔줘요.\n        // 액션을 따로 호출해도 좋지만, 무조건 is_loading이 false 되는 지점에서는 굳이 액션을 두번 일으키기 보단\n        // 이런 식으로 바로 바꿔주는 게 좋아요.\n        draft.is_loading = false;\n      }),\n\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        // 데이터를 배열 맨 앞에 넣어줍니다.\n        draft.list.unshift(action.payload.post);\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        // 배열의 몇 번째에 있는 지 찾습니다.\n        let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n\n        // 해당 위치에 넣어줍니다.\n        draft.list[idx] = { ...draft.list[idx], ...action.payload.post };\n      }),\n    [DELETE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n\n        if (idx !== -1) {\n          // 배열에서 idx 위치의 요소 1개를 지웁니다.\n          draft.list.splice(idx, 1);\n        }\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        //   데이터를 가져오는 중인 지 여부를 작성합니다.\n        draft.is_loading = action.payload.is_loading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n  getOnePostFB,\n  deletePostFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}