{"ast":null,"code":"import _defineProperty from\"/Users/frankie/sparta/hanghae_react/magazine_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _handleActions;import{createAction,handleActions}from\"redux-actions\";import{produce}from\"immer\";import{auth}from\"../../shared/firebase\";import firebase from\"firebase/app\";// 액션 타입부터 정해줍니다!\nvar LOG_OUT=\"LOG_OUT\";var GET_USER=\"GET_USER\";var SET_USER=\"SET_USER\";// 액션 생성 함수를 만들어요.\n//  redux-actions의 createAction을 사용해서 만들어줍니다.\nvar logOut=createAction(LOG_OUT,function(user){return{user:user};});var getUser=createAction(GET_USER,function(user){return{user:user};});var setUser=createAction(SET_USER,function(user){return{user:user};});// initialState를 만듭니다.\n// 기본 값을 미리 정해주는거예요.\n/**\n * user 유저 정보가 들어가는 딕셔너리\n * is_login 로그인했는 지, 아닌 지 여부\n */var initialState={user:null,is_login:false};// 미들웨어(액션이 일어나고 -> 리듀서 내의 어떤 로직이 실행되기 사이의 중간다리 역할을 해줄 함수들)을 작성합니다!\n/**\n *\n * @param {*} id 아이디\n * @param {*} pwd 패스워드\n * 파이어베이스의 인증 서비스를 통해 로그인 한 뒤,\n * 리덕스에서도 로그인 상태를 저장해줄거예요.\n */var loginFB=function loginFB(id,pwd){return function(dispatch,getState,_ref){var history=_ref.history;//   로그인 정보를 저장할 위치를 세션으로 바꿔줍니다.\nauth.setPersistence(firebase.auth.Auth.Persistence.SESSION).then(function(res){// 이메일과 비밀번호로 로그인합니다.\nauth.signInWithEmailAndPassword(id,pwd).then(function(user){// 성공한 경우, 유저 정보가 어떻게 오는 지 주석을 풀고 확인해봐요!\n//   console.log(user);\n//   리덕스에도 유저 정보를 저장해줍니다.\ndispatch(setUser({user_name:user.user.displayName,id:id,user_profile:\"\",uid:user.user.uid}));// 미들웨어에서 페이지 이동하기!\n// 이걸 위해서 configureStore.js에서 뭘 해줬는 지 다시 한 번 확인해보고 오세요!\nwindow.alert(\"로그인 완료!\");history.push(\"/\");}).catch(function(error){// 로그인 실패하면 alert으로 알려줄거예요!\n// 여기에 팝업을 띄워주거나, 왜 실패했는 지 알려주는 등 다른 작업도 해볼 수 있겠죠! :)\n// (시간이 남으면 해보세요!)\nwindow.alert(\"입력하신 아이디와 비밀번호가 일치하지 않습니다!\");var errorCode=error.code;var errorMessage=error.message;console.log(errorCode,errorMessage);});});};};// 회원가입\n/**\n *\n * @param {*} id 아이디\n * @param {*} pwd 패스워드\n * @param {*} user_name 닉네임 (유저 네임)\n * @returns\n */var signupFB=function signupFB(id,pwd,user_name){return function(dispatch,getState,_ref2){var history=_ref2.history;auth.createUserWithEmailAndPassword(id,pwd).then(function(user){console.log(user);auth.currentUser.updateProfile({displayName:user_name}).then(function(){dispatch(setUser({user_name:user_name,id:id,user_profile:\"\",uid:user.user.uid}));window.alert(\"회원가입을 축하합니다!\");history.push(\"/\");}).catch(function(error){console.log(error);});// Signed in\n// ...\n}).catch(function(error){var errorCode=error.code;var errorMessage=error.message;console.log(errorCode,errorMessage);// ..\n});};};// 로그인했는 지 아닌 지 체크, 만약 파이어베이스에 로그인한 상태라면? 리덕스에도 유저 정보를 넣어줍니다.\nvar loginCheckFB=function loginCheckFB(){return function(dispatch,getState,_ref3){var history=_ref3.history;// 유저 정보를 가져옵니다.\nauth.onAuthStateChanged(function(user){// 유저 정보가 있으면 리덕스에 유저 정보 넣어주기\nif(user){dispatch(setUser({user_name:user.displayName,user_profile:\"\",id:user.email,uid:user.uid}));}else{//   없으면 파이어베이스에서도 로그아웃 합니다.\ndispatch(logoutFB());}});};};// 로그아웃\nvar logoutFB=function logoutFB(){return function(dispatch,getState,_ref4){var history=_ref4.history;//   파이어베이스에서 로그아웃하고,\nauth.signOut().then(function(){// 성공하면 리덕스에서도 유저 정보를 삭제하고, is_login 상태를 false로 바꿔줍니다.\ndispatch(logOut());//   그리고 메인 페이지로 이동해요!\nhistory.replace(\"/\");});};};// reducer\nexport default handleActions((_handleActions={},_defineProperty(_handleActions,SET_USER,function(state,action){return produce(state,function(draft){draft.user=action.payload.user;draft.is_login=true;});}),_defineProperty(_handleActions,LOG_OUT,function(state,action){return produce(state,function(draft){draft.user=null;draft.is_login=false;});}),_defineProperty(_handleActions,GET_USER,function(state,action){return produce(state,function(draft){});}),_handleActions),initialState);// 만든 액션생성자들(+중간다리들)을 외부에서 호출할 수 있도록 내보내줍니다. 내보낼 필요가 없는 건 굳이 내보내지 않아도 괜찮아요!\nvar actionCreators={logOut:logOut,getUser:getUser,signupFB:signupFB,loginFB:loginFB,loginCheckFB:loginCheckFB,logoutFB:logoutFB};export{actionCreators};","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","auth","firebase","LOG_OUT","GET_USER","SET_USER","logOut","user","getUser","setUser","initialState","is_login","loginFB","id","pwd","dispatch","getState","history","setPersistence","Auth","Persistence","SESSION","then","res","signInWithEmailAndPassword","user_name","displayName","user_profile","uid","window","alert","push","catch","error","errorCode","code","errorMessage","message","console","log","signupFB","createUserWithEmailAndPassword","currentUser","updateProfile","loginCheckFB","onAuthStateChanged","email","logoutFB","signOut","replace","state","action","draft","payload","actionCreators"],"mappings":"6LAAA,OAASA,YAAT,CAAuBC,aAAvB,KAA4C,eAA5C,CACA,OAASC,OAAT,KAAwB,OAAxB,CAEA,OAASC,IAAT,KAAqB,uBAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,cAArB,CAEA;AACA,GAAMC,CAAAA,OAAO,CAAG,SAAhB,CACA,GAAMC,CAAAA,QAAQ,CAAG,UAAjB,CACA,GAAMC,CAAAA,QAAQ,CAAG,UAAjB,CAEA;AACA;AACA,GAAMC,CAAAA,MAAM,CAAGR,YAAY,CAACK,OAAD,CAAU,SAACI,IAAD,QAAW,CAAEA,IAAI,CAAJA,IAAF,CAAX,EAAV,CAA3B,CACA,GAAMC,CAAAA,OAAO,CAAGV,YAAY,CAACM,QAAD,CAAW,SAACG,IAAD,QAAW,CAAEA,IAAI,CAAJA,IAAF,CAAX,EAAX,CAA5B,CACA,GAAME,CAAAA,OAAO,CAAGX,YAAY,CAACO,QAAD,CAAW,SAACE,IAAD,QAAW,CAAEA,IAAI,CAAJA,IAAF,CAAX,EAAX,CAA5B,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMG,CAAAA,YAAY,CAAG,CACnBH,IAAI,CAAE,IADa,CAEnBI,QAAQ,CAAE,KAFS,CAArB,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,EAAD,CAAKC,GAAL,CAAa,CAC3B,MAAO,UAAUC,QAAV,CAAoBC,QAApB,MAA2C,IAAXC,CAAAA,OAAW,MAAXA,OAAW,CAChD;AACAhB,IAAI,CAACiB,cAAL,CAAoBhB,QAAQ,CAACD,IAAT,CAAckB,IAAd,CAAmBC,WAAnB,CAA+BC,OAAnD,EAA4DC,IAA5D,CAAiE,SAACC,GAAD,CAAS,CACxE;AACAtB,IAAI,CACDuB,0BADH,CAC8BX,EAD9B,CACkCC,GADlC,EAEGQ,IAFH,CAEQ,SAACf,IAAD,CAAU,CACd;AACA;AAEA;AACAQ,QAAQ,CACNN,OAAO,CAAC,CACNgB,SAAS,CAAElB,IAAI,CAACA,IAAL,CAAUmB,WADf,CAENb,EAAE,CAAEA,EAFE,CAGNc,YAAY,CAAE,EAHR,CAINC,GAAG,CAAErB,IAAI,CAACA,IAAL,CAAUqB,GAJT,CAAD,CADD,CAAR,CASA;AACA;AACAC,MAAM,CAACC,KAAP,CAAa,SAAb,EACAb,OAAO,CAACc,IAAR,CAAa,GAAb,EACD,CApBH,EAqBGC,KArBH,CAqBS,SAACC,KAAD,CAAW,CAChB;AACA;AACA;AACAJ,MAAM,CAACC,KAAP,CAAa,4BAAb,EAEA,GAAII,CAAAA,SAAS,CAAGD,KAAK,CAACE,IAAtB,CACA,GAAIC,CAAAA,YAAY,CAAGH,KAAK,CAACI,OAAzB,CAEAC,OAAO,CAACC,GAAR,CAAYL,SAAZ,CAAuBE,YAAvB,EACD,CA/BH,EAgCD,CAlCD,EAmCD,CArCD,CAsCD,CAvCD,CAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAC3B,EAAD,CAAKC,GAAL,CAAUW,SAAV,CAAwB,CACvC,MAAO,UAAUV,QAAV,CAAoBC,QAApB,OAA2C,IAAXC,CAAAA,OAAW,OAAXA,OAAW,CAChDhB,IAAI,CACDwC,8BADH,CACkC5B,EADlC,CACsCC,GADtC,EAEGQ,IAFH,CAEQ,SAACf,IAAD,CAAU,CACd+B,OAAO,CAACC,GAAR,CAAYhC,IAAZ,EAEAN,IAAI,CAACyC,WAAL,CACGC,aADH,CACiB,CACbjB,WAAW,CAAED,SADA,CADjB,EAIGH,IAJH,CAIQ,UAAM,CACVP,QAAQ,CACNN,OAAO,CAAC,CACNgB,SAAS,CAAEA,SADL,CAENZ,EAAE,CAAEA,EAFE,CAGNc,YAAY,CAAE,EAHR,CAINC,GAAG,CAAErB,IAAI,CAACA,IAAL,CAAUqB,GAJT,CAAD,CADD,CAAR,CAQAC,MAAM,CAACC,KAAP,CAAa,cAAb,EACAb,OAAO,CAACc,IAAR,CAAa,GAAb,EACD,CAfH,EAgBGC,KAhBH,CAgBS,SAACC,KAAD,CAAW,CAChBK,OAAO,CAACC,GAAR,CAAYN,KAAZ,EACD,CAlBH,EAoBA;AACA;AACD,CA3BH,EA4BGD,KA5BH,CA4BS,SAACC,KAAD,CAAW,CAChB,GAAIC,CAAAA,SAAS,CAAGD,KAAK,CAACE,IAAtB,CACA,GAAIC,CAAAA,YAAY,CAAGH,KAAK,CAACI,OAAzB,CAEAC,OAAO,CAACC,GAAR,CAAYL,SAAZ,CAAuBE,YAAvB,EACA;AACD,CAlCH,EAmCD,CApCD,CAqCD,CAtCD,CAwCA;AACA,GAAMQ,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,MAAO,UAAU7B,QAAV,CAAoBC,QAApB,OAA2C,IAAXC,CAAAA,OAAW,OAAXA,OAAW,CAChD;AACAhB,IAAI,CAAC4C,kBAAL,CAAwB,SAACtC,IAAD,CAAU,CAChC;AACA,GAAIA,IAAJ,CAAU,CACRQ,QAAQ,CACNN,OAAO,CAAC,CACNgB,SAAS,CAAElB,IAAI,CAACmB,WADV,CAENC,YAAY,CAAE,EAFR,CAGNd,EAAE,CAAEN,IAAI,CAACuC,KAHH,CAINlB,GAAG,CAAErB,IAAI,CAACqB,GAJJ,CAAD,CADD,CAAR,CAQD,CATD,IASO,CACL;AACAb,QAAQ,CAACgC,QAAQ,EAAT,CAAR,CACD,CACF,CAfD,EAgBD,CAlBD,CAmBD,CApBD,CAsBA;AACA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,MAAO,UAAUhC,QAAV,CAAoBC,QAApB,OAA2C,IAAXC,CAAAA,OAAW,OAAXA,OAAW,CAChD;AACAhB,IAAI,CAAC+C,OAAL,GAAe1B,IAAf,CAAoB,UAAM,CACxB;AACAP,QAAQ,CAACT,MAAM,EAAP,CAAR,CACA;AACAW,OAAO,CAACgC,OAAR,CAAgB,GAAhB,EACD,CALD,EAMD,CARD,CASD,CAVD,CAYA;AACA,cAAelD,CAAAA,aAAa,mDAEvBM,QAFuB,CAEZ,SAAC6C,KAAD,CAAQC,MAAR,QACVnD,CAAAA,OAAO,CAACkD,KAAD,CAAQ,SAACE,KAAD,CAAW,CACxBA,KAAK,CAAC7C,IAAN,CAAa4C,MAAM,CAACE,OAAP,CAAe9C,IAA5B,CACA6C,KAAK,CAACzC,QAAN,CAAiB,IAAjB,CACD,CAHM,CADG,EAFY,iCAOvBR,OAPuB,CAOb,SAAC+C,KAAD,CAAQC,MAAR,QACTnD,CAAAA,OAAO,CAACkD,KAAD,CAAQ,SAACE,KAAD,CAAW,CACxBA,KAAK,CAAC7C,IAAN,CAAa,IAAb,CACA6C,KAAK,CAACzC,QAAN,CAAiB,KAAjB,CACD,CAHM,CADE,EAPa,iCAYvBP,QAZuB,CAYZ,SAAC8C,KAAD,CAAQC,MAAR,QAAmBnD,CAAAA,OAAO,CAACkD,KAAD,CAAQ,SAACE,KAAD,CAAW,CAAE,CAArB,CAA1B,EAZY,kBAc1B1C,YAd0B,CAA5B,CAiBA;AACA,GAAM4C,CAAAA,cAAc,CAAG,CACrBhD,MAAM,CAANA,MADqB,CAErBE,OAAO,CAAPA,OAFqB,CAGrBgC,QAAQ,CAARA,QAHqB,CAIrB5B,OAAO,CAAPA,OAJqB,CAKrBgC,YAAY,CAAZA,YALqB,CAMrBG,QAAQ,CAARA,QANqB,CAAvB,CASA,OAASO,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\n\nimport { auth } from \"../../shared/firebase\";\nimport firebase from \"firebase/app\";\n\n// 액션 타입부터 정해줍니다!\nconst LOG_OUT = \"LOG_OUT\";\nconst GET_USER = \"GET_USER\";\nconst SET_USER = \"SET_USER\";\n\n// 액션 생성 함수를 만들어요.\n//  redux-actions의 createAction을 사용해서 만들어줍니다.\nconst logOut = createAction(LOG_OUT, (user) => ({ user }));\nconst getUser = createAction(GET_USER, (user) => ({ user }));\nconst setUser = createAction(SET_USER, (user) => ({ user }));\n\n// initialState를 만듭니다.\n// 기본 값을 미리 정해주는거예요.\n/**\n * user 유저 정보가 들어가는 딕셔너리\n * is_login 로그인했는 지, 아닌 지 여부\n */\nconst initialState = {\n  user: null,\n  is_login: false,\n};\n\n// 미들웨어(액션이 일어나고 -> 리듀서 내의 어떤 로직이 실행되기 사이의 중간다리 역할을 해줄 함수들)을 작성합니다!\n/**\n *\n * @param {*} id 아이디\n * @param {*} pwd 패스워드\n * 파이어베이스의 인증 서비스를 통해 로그인 한 뒤,\n * 리덕스에서도 로그인 상태를 저장해줄거예요.\n */\nconst loginFB = (id, pwd) => {\n  return function (dispatch, getState, { history }) {\n    //   로그인 정보를 저장할 위치를 세션으로 바꿔줍니다.\n    auth.setPersistence(firebase.auth.Auth.Persistence.SESSION).then((res) => {\n      // 이메일과 비밀번호로 로그인합니다.\n      auth\n        .signInWithEmailAndPassword(id, pwd)\n        .then((user) => {\n          // 성공한 경우, 유저 정보가 어떻게 오는 지 주석을 풀고 확인해봐요!\n          //   console.log(user);\n\n          //   리덕스에도 유저 정보를 저장해줍니다.\n          dispatch(\n            setUser({\n              user_name: user.user.displayName,\n              id: id,\n              user_profile: \"\",\n              uid: user.user.uid,\n            })\n          );\n\n          // 미들웨어에서 페이지 이동하기!\n          // 이걸 위해서 configureStore.js에서 뭘 해줬는 지 다시 한 번 확인해보고 오세요!\n          window.alert(\"로그인 완료!\");\n          history.push(\"/\");\n        })\n        .catch((error) => {\n          // 로그인 실패하면 alert으로 알려줄거예요!\n          // 여기에 팝업을 띄워주거나, 왜 실패했는 지 알려주는 등 다른 작업도 해볼 수 있겠죠! :)\n          // (시간이 남으면 해보세요!)\n          window.alert(\"입력하신 아이디와 비밀번호가 일치하지 않습니다!\");\n\n          var errorCode = error.code;\n          var errorMessage = error.message;\n\n          console.log(errorCode, errorMessage);\n        });\n    });\n  };\n};\n\n// 회원가입\n/**\n *\n * @param {*} id 아이디\n * @param {*} pwd 패스워드\n * @param {*} user_name 닉네임 (유저 네임)\n * @returns\n */\nconst signupFB = (id, pwd, user_name) => {\n  return function (dispatch, getState, { history }) {\n    auth\n      .createUserWithEmailAndPassword(id, pwd)\n      .then((user) => {\n        console.log(user);\n\n        auth.currentUser\n          .updateProfile({\n            displayName: user_name,\n          })\n          .then(() => {\n            dispatch(\n              setUser({\n                user_name: user_name,\n                id: id,\n                user_profile: \"\",\n                uid: user.user.uid,\n              })\n            );\n            window.alert(\"회원가입을 축하합니다!\");\n            history.push(\"/\");\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n\n        // Signed in\n        // ...\n      })\n      .catch((error) => {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n\n        console.log(errorCode, errorMessage);\n        // ..\n      });\n  };\n};\n\n// 로그인했는 지 아닌 지 체크, 만약 파이어베이스에 로그인한 상태라면? 리덕스에도 유저 정보를 넣어줍니다.\nconst loginCheckFB = () => {\n  return function (dispatch, getState, { history }) {\n    // 유저 정보를 가져옵니다.\n    auth.onAuthStateChanged((user) => {\n      // 유저 정보가 있으면 리덕스에 유저 정보 넣어주기\n      if (user) {\n        dispatch(\n          setUser({\n            user_name: user.displayName,\n            user_profile: \"\",\n            id: user.email,\n            uid: user.uid,\n          })\n        );\n      } else {\n        //   없으면 파이어베이스에서도 로그아웃 합니다.\n        dispatch(logoutFB());\n      }\n    });\n  };\n};\n\n// 로그아웃\nconst logoutFB = () => {\n  return function (dispatch, getState, { history }) {\n    //   파이어베이스에서 로그아웃하고,\n    auth.signOut().then(() => {\n      // 성공하면 리덕스에서도 유저 정보를 삭제하고, is_login 상태를 false로 바꿔줍니다.\n      dispatch(logOut());\n      //   그리고 메인 페이지로 이동해요!\n      history.replace(\"/\");\n    });\n  };\n};\n\n// reducer\nexport default handleActions(\n  {\n    [SET_USER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.user = action.payload.user;\n        draft.is_login = true;\n      }),\n    [LOG_OUT]: (state, action) =>\n      produce(state, (draft) => {\n        draft.user = null;\n        draft.is_login = false;\n      }),\n    [GET_USER]: (state, action) => produce(state, (draft) => {}),\n  },\n  initialState\n);\n\n// 만든 액션생성자들(+중간다리들)을 외부에서 호출할 수 있도록 내보내줍니다. 내보낼 필요가 없는 건 굳이 내보내지 않아도 괜찮아요!\nconst actionCreators = {\n  logOut,\n  getUser,\n  signupFB,\n  loginFB,\n  loginCheckFB,\n  logoutFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}