{"ast":null,"code":"var _jsxFileName = \"/Users/frankie/sparta/hanghae_react/magazine_test/src/shared/InfinityScroll.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { Spinner } from \"../elements\"; // 무한 스크롤\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfinityScroll = props => {\n  _s();\n\n  const {\n    children,\n    callNext,\n    is_next,\n    loading\n  } = props; // 스크롤 이벤트에 throttle을 붙여줍니다.\n  //   이 부분 자세한 내용이 궁금하다면 심화 강의 3주차 throttle, 4주차 무한스크롤 만들기를 참고해주세요!\n\n  const _handleScroll = _.throttle(() => {\n    // 만약 로딩 중이라면? (이미 게시글을 불러오고 있었다면?)\n    // 더 불러오지 않게 해요!\n    if (loading) {\n      return;\n    }\n\n    const {\n      innerHeight\n    } = window;\n    const {\n      scrollHeight\n    } = document.body; // 스크롤 위치를 계산해요\n    // 스크롤 위치를 계산해서 다음 목록을 불러옵니다.\n\n    const scrollTop = document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;\n\n    if (scrollHeight - innerHeight - scrollTop < 200) {\n      callNext();\n    }\n  }, 300);\n\n  const handleScroll = React.useCallback(_handleScroll, [loading]);\n  React.useEffect(() => {\n    if (loading) {\n      return;\n    } // is_next (다음 게시글이 있는 지 여부)가 참일 때 이벤트를 구독하고, 거짓이라면 구독을 해제해요!\n\n\n    if (is_next) {\n      window.addEventListener(\"scroll\", handleScroll);\n    } else {\n      window.removeEventListener(\"scroll\", handleScroll);\n    } // 컴포넌트가 화면에서 사라질 때 이벤트 구독을 해제합니다.\n\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [is_next, loading]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [children, is_next && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InfinityScroll, \"8BseBLutViIVp8ya6fspMHeE7wM=\");\n\n_c = InfinityScroll;\nInfinityScroll.defaultProps = {\n  children: null,\n  callNext: () => {},\n  is_next: false,\n  loading: false\n};\nexport default InfinityScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfinityScroll\");","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/shared/InfinityScroll.js"],"names":["React","_","Spinner","InfinityScroll","props","children","callNext","is_next","loading","_handleScroll","throttle","innerHeight","window","scrollHeight","document","body","scrollTop","documentElement","handleScroll","useCallback","useEffect","addEventListener","removeEventListener","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;;;AACA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA;AAA/B,MAA2CJ,KAAjD,CADgC,CAGhC;AACA;;AACA,QAAMK,aAAa,GAAGR,CAAC,CAACS,QAAF,CAAW,MAAM;AAErC;AACA;AACA,QAAIF,OAAJ,EAAa;AACX;AACD;;AAED,UAAM;AAAEG,MAAAA;AAAF,QAAkBC,MAAxB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAmBC,QAAQ,CAACC,IAAlC,CATqC,CAWrC;AACA;;AACA,UAAMC,SAAS,GACZF,QAAQ,CAACG,eAAT,IAA4BH,QAAQ,CAACG,eAAT,CAAyBD,SAAtD,IACAF,QAAQ,CAACC,IAAT,CAAcC,SAFhB;;AAIA,QAAIH,YAAY,GAAGF,WAAf,GAA6BK,SAA7B,GAAyC,GAA7C,EAAkD;AAChDV,MAAAA,QAAQ;AACT;AACF,GApBqB,EAoBnB,GApBmB,CAAtB;;AAsBA,QAAMY,YAAY,GAAGlB,KAAK,CAACmB,WAAN,CAAkBV,aAAlB,EAAiC,CAACD,OAAD,CAAjC,CAArB;AAEAR,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,QAAIZ,OAAJ,EAAa;AACX;AACD,KAHmB,CAKpB;;;AACA,QAAID,OAAJ,EAAa;AACXK,MAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC;AACD,KAFD,MAEO;AACLN,MAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC;AACD,KAVmB,CAYpB;;;AACA,WAAO,MAAMN,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC,CAAb;AACD,GAdD,EAcG,CAACX,OAAD,EAAUC,OAAV,CAdH;AAgBA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,eACGH,QADH,EAGGE,OAAO,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAHd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApDD;;GAAMJ,c;;KAAAA,c;AAsDNA,cAAc,CAACoB,YAAf,GAA8B;AAC5BlB,EAAAA,QAAQ,EAAE,IADkB;AAE5BC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFU;AAG5BC,EAAAA,OAAO,EAAE,KAHmB;AAI5BC,EAAAA,OAAO,EAAE;AAJmB,CAA9B;AAOA,eAAeL,cAAf","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { Spinner } from \"../elements\";\n\n// 무한 스크롤\nconst InfinityScroll = (props) => {\n  const { children, callNext, is_next, loading } = props;\n\n  // 스크롤 이벤트에 throttle을 붙여줍니다.\n  //   이 부분 자세한 내용이 궁금하다면 심화 강의 3주차 throttle, 4주차 무한스크롤 만들기를 참고해주세요!\n  const _handleScroll = _.throttle(() => {\n\n    // 만약 로딩 중이라면? (이미 게시글을 불러오고 있었다면?)\n    // 더 불러오지 않게 해요!\n    if (loading) {\n      return;\n    }\n\n    const { innerHeight } = window;\n    const { scrollHeight } = document.body;\n\n    // 스크롤 위치를 계산해요\n    // 스크롤 위치를 계산해서 다음 목록을 불러옵니다.\n    const scrollTop =\n      (document.documentElement && document.documentElement.scrollTop) ||\n      document.body.scrollTop;\n\n    if (scrollHeight - innerHeight - scrollTop < 200) {\n      callNext();\n    }\n  }, 300);\n\n  const handleScroll = React.useCallback(_handleScroll, [loading]);\n\n  React.useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    // is_next (다음 게시글이 있는 지 여부)가 참일 때 이벤트를 구독하고, 거짓이라면 구독을 해제해요!\n    if (is_next) {\n      window.addEventListener(\"scroll\", handleScroll);\n    } else {\n      window.removeEventListener(\"scroll\", handleScroll);\n    }\n\n    // 컴포넌트가 화면에서 사라질 때 이벤트 구독을 해제합니다.\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [is_next, loading]);\n\n  return (\n    <React.Fragment>\n      {children}\n      {/* 다음 게시글이 있으면 스피너를 보여줍니다. */}\n      {is_next && <Spinner />}\n    </React.Fragment>\n  );\n};\n\nInfinityScroll.defaultProps = {\n  children: null,\n  callNext: () => {},\n  is_next: false,\n  loading: false,\n};\n\nexport default InfinityScroll;\n"]},"metadata":{},"sourceType":"module"}