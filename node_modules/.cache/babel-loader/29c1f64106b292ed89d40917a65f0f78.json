{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nconst SET_LIKE = \"SET_LIKE\";\nconst ADD_LIKE = \"ADD_LIKE\";\nconst LOADING = \"LOADING\";\nconst setlike = createAction(SET_LIKE, (post_id, is_liked) => ({\n  post_id,\n  is_liked\n}));\nconst addlike = createAction(ADD_LIKE, (post_id, is_liked) => ({\n  post_id,\n  is_liked\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst getLikeFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {};\n};\n\nconst addLikeFB = (post_id, is_liked) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const likeDB = firestore.collection(\"like\");\n    const user_id = getState().user.user.uid;\n    let like = {\n      post_id: post_id,\n      user_id: user_id,\n      like: is_liked\n    };\n    likeDB.add(like).then(doc => {\n      const postDB = firestore.collection(\"post\");\n      like = { ...like,\n        id: doc.id\n      };\n      const post = getState().post.list.find(l => l.id === post_id);\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_LIKE]: (state, action) => produce(state, draft => {}),\n  [ADD_LIKE]: (state, action) => produce(state, draft => {}),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getLikeFB,\n  setlike,\n  addlike\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/modules/like.js"],"names":["createAction","handleActions","produce","firestore","SET_LIKE","ADD_LIKE","LOADING","setlike","post_id","is_liked","addlike","loading","is_loading","initialState","list","getLikeFB","dispatch","getState","history","addLikeFB","likeDB","collection","user_id","user","uid","like","add","then","doc","postDB","id","post","find","l","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,OAAO,GAAG,SAAhB;AAEA,MAAMC,OAAO,GAAIP,YAAY,CAACI,QAAD,EAAW,CAACI,OAAD,EAAUC,QAAV,MAAwB;AAACD,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAxB,CAAX,CAA7B;AACA,MAAMC,OAAO,GAAGV,YAAY,CAACK,QAAD,EAAW,CAACG,OAAD,EAAUC,QAAV,MAAwB;AAACD,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAxB,CAAX,CAA5B;AAEA,MAAME,OAAO,GAAGX,YAAY,CAACM,OAAD,EAAWM,UAAD,KAAiB;AAAEA,EAAAA;AAAF,CAAjB,CAAV,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBF,EAAAA,UAAU,EAAE;AAFO,CAArB;;AAKA,MAAMG,SAAS,GAAIP,OAAD,IAAa;AAC3B,SAAO,UAASQ,QAAT,EAAmBC,QAAnB,EAA6B;AAACC,IAAAA;AAAD,GAA7B,EAAuC,CAC7C,CADD;AAEH,CAHD;;AAKA,MAAMC,SAAS,GAAG,CAACX,OAAD,EAAUC,QAAV,KAAuB;AACvC,SAAO,UAAUO,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAC9C,UAAME,MAAM,GAAGjB,SAAS,CAACkB,UAAV,CAAqB,MAArB,CAAf;AACA,UAAMC,OAAO,GAAGL,QAAQ,GAAGM,IAAX,CAAgBA,IAAhB,CAAqBC,GAArC;AAEA,QAAIC,IAAI,GAAG;AACTjB,MAAAA,OAAO,EAAEA,OADA;AAETc,MAAAA,OAAO,EAAEA,OAFA;AAGTG,MAAAA,IAAI,EAAEhB;AAHG,KAAX;AAKAW,IAAAA,MAAM,CAACM,GAAP,CAAWD,IAAX,EAAiBE,IAAjB,CAAuBC,GAAD,IAAS;AAC7B,YAAMC,MAAM,GAAG1B,SAAS,CAACkB,UAAV,CAAqB,MAArB,CAAf;AACAI,MAAAA,IAAI,GAAG,EAAC,GAAGA,IAAJ;AAAUK,QAAAA,EAAE,EAACF,GAAG,CAACE;AAAjB,OAAP;AAEA,YAAMC,IAAI,GAAGd,QAAQ,GAAGc,IAAX,CAAgBjB,IAAhB,CAAqBkB,IAArB,CAA2BC,CAAD,IAAOA,CAAC,CAACH,EAAF,KAAStB,OAA1C,CAAb;AACD,KALD;AAMD,GAfD;AAgBD,CAjBD;;AAoBA,eAAeP,aAAa,CAC1B;AACI,GAACG,QAAD,GAAY,CAAC8B,KAAD,EAAQC,MAAR,KAAmBjC,OAAO,CAACgC,KAAD,EAASE,KAAD,IAAW,CAExD,CAFqC,CAD1C;AAII,GAAC/B,QAAD,GAAY,CAAC6B,KAAD,EAAQC,MAAR,KAAmBjC,OAAO,CAACgC,KAAD,EAASE,KAAD,IAAU,CAEvD,CAFqC,CAJ1C;AAOI,GAAC9B,OAAD,GAAW,CAAC4B,KAAD,EAAQC,MAAR,KACXjC,OAAO,CAACgC,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACxB,UAAN,GAAmBuB,MAAM,CAACE,OAAP,CAAezB,UAAlC;AACD,GAFM;AARX,CAD0B,EAa1BC,YAb0B,CAA5B;AAgBA,MAAMyB,cAAc,GAAG;AACrBvB,EAAAA,SADqB;AAErBR,EAAAA,OAFqB;AAGrBG,EAAAA;AAHqB,CAAvB;AAMA,SAAS4B,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\n\nconst SET_LIKE = \"SET_LIKE\";\nconst ADD_LIKE = \"ADD_LIKE\";\nconst LOADING = \"LOADING\";\n\nconst setlike =  createAction(SET_LIKE, (post_id, is_liked) => ({post_id, is_liked}));\nconst addlike = createAction(ADD_LIKE, (post_id, is_liked) => ({post_id, is_liked}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: {},\n  is_loading: false,\n};\n\nconst getLikeFB = (post_id) => {\n    return function(dispatch, getState, {history}){\n    }\n}\n\nconst addLikeFB = (post_id, is_liked) => {\n  return function (dispatch, getState, {history}) {\n    const likeDB = firestore.collection(\"like\");\n    const user_id = getState().user.user.uid;\n\n    let like = {\n      post_id: post_id,\n      user_id: user_id,\n      like: is_liked\n    }\n    likeDB.add(like).then((doc) => {\n      const postDB = firestore.collection(\"post\");\n      like = {...like, id:doc.id};\n\n      const post = getState().post.list.find((l) => l.id === post_id);\n    })\n  }\n}\n\n\nexport default handleActions(\n  {\n      [SET_LIKE]: (state, action) => produce(state, (draft) => {\n\n      }),\n      [ADD_LIKE]: (state, action) => produce(state, (draft)=> {\n\n      }),\n      [LOADING]: (state, action) => \n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      })\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getLikeFB,\n  setlike,\n  addlike,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}