{"ast":null,"code":"import React from\"react\";import _ from\"lodash\";import{Spinner}from\"../elements\";// 무한 스크롤\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var InfinityScroll=function InfinityScroll(props){var children=props.children,callNext=props.callNext,is_next=props.is_next,loading=props.loading;// 스크롤 이벤트에 throttle을 붙여줍니다.\n//   이 부분 자세한 내용이 궁금하다면 심화 강의 3주차 throttle, 4주차 무한스크롤 만들기를 참고해주세요!\nvar _handleScroll=_.throttle(function(){// 만약 로딩 중이라면? (이미 게시글을 불러오고 있었다면?)\n// 더 불러오지 않게 해요!\nif(loading){return;}var _window=window,innerHeight=_window.innerHeight;var scrollHeight=document.body.scrollHeight;// 스크롤 위치를 계산해요\n// 스크롤 위치를 계산해서 다음 목록을 불러옵니다.\nvar scrollTop=document.documentElement&&document.documentElement.scrollTop||document.body.scrollTop;if(scrollHeight-innerHeight-scrollTop<200){callNext();}},300);var handleScroll=React.useCallback(_handleScroll,[loading]);React.useEffect(function(){if(loading){return;}// is_next (다음 게시글이 있는 지 여부)가 참일 때 이벤트를 구독하고, 거짓이라면 구독을 해제해요!\nif(is_next){window.addEventListener(\"scroll\",handleScroll);}else{window.removeEventListener(\"scroll\",handleScroll);}// 컴포넌트가 화면에서 사라질 때 이벤트 구독을 해제합니다.\nreturn function(){return window.removeEventListener(\"scroll\",handleScroll);};},[is_next,loading]);return/*#__PURE__*/_jsxs(React.Fragment,{children:[children,is_next&&/*#__PURE__*/_jsx(Spinner,{})]});};InfinityScroll.defaultProps={children:null,callNext:function callNext(){},is_next:false,loading:false};export default InfinityScroll;","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/shared/InfinityScroll.js"],"names":["React","_","Spinner","InfinityScroll","props","children","callNext","is_next","loading","_handleScroll","throttle","window","innerHeight","scrollHeight","document","body","scrollTop","documentElement","handleScroll","useCallback","useEffect","addEventListener","removeEventListener","defaultProps"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA;wFACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,IACxBC,CAAAA,QADwB,CACiBD,KADjB,CACxBC,QADwB,CACdC,QADc,CACiBF,KADjB,CACdE,QADc,CACJC,OADI,CACiBH,KADjB,CACJG,OADI,CACKC,OADL,CACiBJ,KADjB,CACKI,OADL,CAGhC;AACA;AACA,GAAMC,CAAAA,aAAa,CAAGR,CAAC,CAACS,QAAF,CAAW,UAAM,CAErC;AACA;AACA,GAAIF,OAAJ,CAAa,CACX,OACD,CANoC,YAQbG,MARa,CAQ7BC,WAR6B,SAQ7BA,WAR6B,IAS7BC,CAAAA,YAT6B,CASZC,QAAQ,CAACC,IATG,CAS7BF,YAT6B,CAWrC;AACA;AACA,GAAMG,CAAAA,SAAS,CACZF,QAAQ,CAACG,eAAT,EAA4BH,QAAQ,CAACG,eAAT,CAAyBD,SAAtD,EACAF,QAAQ,CAACC,IAAT,CAAcC,SAFhB,CAIA,GAAIH,YAAY,CAAGD,WAAf,CAA6BI,SAA7B,CAAyC,GAA7C,CAAkD,CAChDV,QAAQ,GACT,CACF,CApBqB,CAoBnB,GApBmB,CAAtB,CAsBA,GAAMY,CAAAA,YAAY,CAAGlB,KAAK,CAACmB,WAAN,CAAkBV,aAAlB,CAAiC,CAACD,OAAD,CAAjC,CAArB,CAEAR,KAAK,CAACoB,SAAN,CAAgB,UAAM,CACpB,GAAIZ,OAAJ,CAAa,CACX,OACD,CAED;AACA,GAAID,OAAJ,CAAa,CACXI,MAAM,CAACU,gBAAP,CAAwB,QAAxB,CAAkCH,YAAlC,EACD,CAFD,IAEO,CACLP,MAAM,CAACW,mBAAP,CAA2B,QAA3B,CAAqCJ,YAArC,EACD,CAED;AACA,MAAO,kBAAMP,CAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,CAAqCJ,YAArC,CAAN,EAAP,CACD,CAdD,CAcG,CAACX,OAAD,CAAUC,OAAV,CAdH,EAgBA,mBACE,MAAC,KAAD,CAAO,QAAP,YACGH,QADH,CAGGE,OAAO,eAAI,KAAC,OAAD,IAHd,GADF,CAOD,CApDD,CAsDAJ,cAAc,CAACoB,YAAf,CAA8B,CAC5BlB,QAAQ,CAAE,IADkB,CAE5BC,QAAQ,CAAE,mBAAM,CAAE,CAFU,CAG5BC,OAAO,CAAE,KAHmB,CAI5BC,OAAO,CAAE,KAJmB,CAA9B,CAOA,cAAeL,CAAAA,cAAf","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { Spinner } from \"../elements\";\n\n// 무한 스크롤\nconst InfinityScroll = (props) => {\n  const { children, callNext, is_next, loading } = props;\n\n  // 스크롤 이벤트에 throttle을 붙여줍니다.\n  //   이 부분 자세한 내용이 궁금하다면 심화 강의 3주차 throttle, 4주차 무한스크롤 만들기를 참고해주세요!\n  const _handleScroll = _.throttle(() => {\n\n    // 만약 로딩 중이라면? (이미 게시글을 불러오고 있었다면?)\n    // 더 불러오지 않게 해요!\n    if (loading) {\n      return;\n    }\n\n    const { innerHeight } = window;\n    const { scrollHeight } = document.body;\n\n    // 스크롤 위치를 계산해요\n    // 스크롤 위치를 계산해서 다음 목록을 불러옵니다.\n    const scrollTop =\n      (document.documentElement && document.documentElement.scrollTop) ||\n      document.body.scrollTop;\n\n    if (scrollHeight - innerHeight - scrollTop < 200) {\n      callNext();\n    }\n  }, 300);\n\n  const handleScroll = React.useCallback(_handleScroll, [loading]);\n\n  React.useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    // is_next (다음 게시글이 있는 지 여부)가 참일 때 이벤트를 구독하고, 거짓이라면 구독을 해제해요!\n    if (is_next) {\n      window.addEventListener(\"scroll\", handleScroll);\n    } else {\n      window.removeEventListener(\"scroll\", handleScroll);\n    }\n\n    // 컴포넌트가 화면에서 사라질 때 이벤트 구독을 해제합니다.\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [is_next, loading]);\n\n  return (\n    <React.Fragment>\n      {children}\n      {/* 다음 게시글이 있으면 스피너를 보여줍니다. */}\n      {is_next && <Spinner />}\n    </React.Fragment>\n  );\n};\n\nInfinityScroll.defaultProps = {\n  children: null,\n  callNext: () => {},\n  is_next: false,\n  loading: false,\n};\n\nexport default InfinityScroll;\n"]},"metadata":{},"sourceType":"module"}