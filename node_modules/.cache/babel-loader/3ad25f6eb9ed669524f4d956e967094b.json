{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { auth } from \"../../shared/firebase\";\nimport firebase from \"firebase/app\"; // 액션 타입부터 정해줍니다!\n\nconst LOG_OUT = \"LOG_OUT\";\nconst GET_USER = \"GET_USER\";\nconst SET_USER = \"SET_USER\"; // 액션 생성 함수를 만들어요.\n//  redux-actions의 createAction을 사용해서 만들어줍니다.\n\nconst logOut = createAction(LOG_OUT, user => ({\n  user\n}));\nconst getUser = createAction(GET_USER, user => ({\n  user\n}));\nconst setUser = createAction(SET_USER, user => ({\n  user\n})); // initialState를 만듭니다.\n// 기본 값을 미리 정해주는거예요.\n\n/**\n * user 유저 정보가 들어가는 딕셔너리\n * is_login 로그인했는 지, 아닌 지 여부\n */\n\nconst initialState = {\n  user: null,\n  is_login: false\n}; // 미들웨어(액션이 일어나고 -> 리듀서 내의 어떤 로직이 실행되기 사이의 중간다리 역할을 해줄 함수들)을 작성합니다!\n\n/**\n *\n * @param {*} id 아이디\n * @param {*} pwd 패스워드\n * 파이어베이스의 인증 서비스를 통해 로그인 한 뒤,\n * 리덕스에서도 로그인 상태를 저장해줄거예요.\n */\n\nconst loginFB = (id, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    //   로그인 정보를 저장할 위치를 세션으로 바꿔줍니다.\n    auth.setPersistence(firebase.auth.Auth.Persistence.SESSION).then(res => {\n      // 이메일과 비밀번호로 로그인합니다.\n      auth.signInWithEmailAndPassword(id, pwd).then(user => {\n        // 성공한 경우, 유저 정보가 어떻게 오는 지 주석을 풀고 확인해봐요!\n        //   console.log(user);\n        //   리덕스에도 유저 정보를 저장해줍니다.\n        dispatch(setUser({\n          user_name: user.user.displayName,\n          id: id,\n          user_profile: \"\",\n          uid: user.user.uid\n        })); // 미들웨어에서 페이지 이동하기!\n        // 이걸 위해서 configureStore.js에서 뭘 해줬는 지 다시 한 번 확인해보고 오세요!\n\n        window.alert(\"로그인 완료!\");\n        history.push(\"/\");\n      }).catch(error => {\n        // 로그인 실패하면 alert으로 알려줄거예요!\n        // 여기에 팝업을 띄워주거나, 왜 실패했는 지 알려주는 등 다른 작업도 해볼 수 있겠죠! :)\n        // (시간이 남으면 해보세요!)\n        window.alert(\"로그인 실패!\");\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(errorCode, errorMessage);\n      });\n    });\n  };\n}; // 회원가입\n\n/**\n *\n * @param {*} id 아이디\n * @param {*} pwd 패스워드\n * @param {*} user_name 닉네임 (유저 네임)\n * @returns\n */\n\n\nconst signupFB = (id, pwd, user_name) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    auth.createUserWithEmailAndPassword(id, pwd).then(user => {\n      console.log(user);\n      auth.currentUser.updateProfile({\n        displayName: user_name\n      }).then(() => {\n        dispatch(setUser({\n          user_name: user_name,\n          id: id,\n          user_profile: \"\",\n          uid: user.user.uid\n        }));\n        window.alert(\"회원가입을 축하합니다!\");\n        history.push(\"/\");\n      }).catch(error => {\n        console.log(error);\n      }); // Signed in\n      // ...\n    }).catch(error => {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      console.log(errorCode, errorMessage); // ..\n    });\n  };\n}; // 로그인했는 지 아닌 지 체크, 만약 파이어베이스에 로그인한 상태라면? 리덕스에도 유저 정보를 넣어줍니다.\n\n\nconst loginCheckFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    // 유저 정보를 가져옵니다.\n    auth.onAuthStateChanged(user => {\n      // 유저 정보가 있으면 리덕스에 유저 정보 넣어주기\n      if (user) {\n        dispatch(setUser({\n          user_name: user.displayName,\n          user_profile: \"\",\n          id: user.email,\n          uid: user.uid\n        }));\n      } else {\n        //   없으면 파이어베이스에서도 로그아웃 합니다.\n        dispatch(logoutFB());\n      }\n    });\n  };\n}; // 로그아웃\n\n\nconst logoutFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    //   파이어베이스에서 로그아웃하고,\n    auth.signOut().then(() => {\n      // 성공하면 리덕스에서도 유저 정보를 삭제하고, is_login 상태를 false로 바꿔줍니다.\n      dispatch(logOut()); //   그리고 메인 페이지로 이동해요!\n\n      history.replace(\"/\");\n    });\n  };\n}; // reducer\n\n\nexport default handleActions({\n  [SET_USER]: (state, action) => produce(state, draft => {\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  }),\n  [LOG_OUT]: (state, action) => produce(state, draft => {\n    draft.user = null;\n    draft.is_login = false;\n  }),\n  [GET_USER]: (state, action) => produce(state, draft => {})\n}, initialState); // 만든 액션생성자들(+중간다리들)을 외부에서 호출할 수 있도록 내보내줍니다. 내보낼 필요가 없는 건 굳이 내보내지 않아도 괜찮아요!\n\nconst actionCreators = {\n  logOut,\n  getUser,\n  signupFB,\n  loginFB,\n  loginCheckFB,\n  logoutFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","auth","firebase","LOG_OUT","GET_USER","SET_USER","logOut","user","getUser","setUser","initialState","is_login","loginFB","id","pwd","dispatch","getState","history","setPersistence","Auth","Persistence","SESSION","then","res","signInWithEmailAndPassword","user_name","displayName","user_profile","uid","window","alert","push","catch","error","errorCode","code","errorMessage","message","console","log","signupFB","createUserWithEmailAndPassword","currentUser","updateProfile","loginCheckFB","onAuthStateChanged","email","logoutFB","signOut","replace","state","action","draft","payload","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\n\nimport { auth } from \"../../shared/firebase\";\nimport firebase from \"firebase/app\";\n\n// 액션 타입부터 정해줍니다!\nconst LOG_OUT = \"LOG_OUT\";\nconst GET_USER = \"GET_USER\";\nconst SET_USER = \"SET_USER\";\n\n// 액션 생성 함수를 만들어요.\n//  redux-actions의 createAction을 사용해서 만들어줍니다.\nconst logOut = createAction(LOG_OUT, (user) => ({ user }));\nconst getUser = createAction(GET_USER, (user) => ({ user }));\nconst setUser = createAction(SET_USER, (user) => ({ user }));\n\n// initialState를 만듭니다.\n// 기본 값을 미리 정해주는거예요.\n/**\n * user 유저 정보가 들어가는 딕셔너리\n * is_login 로그인했는 지, 아닌 지 여부\n */\nconst initialState = {\n  user: null,\n  is_login: false,\n};\n\n// 미들웨어(액션이 일어나고 -> 리듀서 내의 어떤 로직이 실행되기 사이의 중간다리 역할을 해줄 함수들)을 작성합니다!\n/**\n *\n * @param {*} id 아이디\n * @param {*} pwd 패스워드\n * 파이어베이스의 인증 서비스를 통해 로그인 한 뒤,\n * 리덕스에서도 로그인 상태를 저장해줄거예요.\n */\nconst loginFB = (id, pwd) => {\n  return function (dispatch, getState, { history }) {\n    //   로그인 정보를 저장할 위치를 세션으로 바꿔줍니다.\n    auth.setPersistence(firebase.auth.Auth.Persistence.SESSION).then((res) => {\n      // 이메일과 비밀번호로 로그인합니다.\n      auth\n        .signInWithEmailAndPassword(id, pwd)\n        .then((user) => {\n          // 성공한 경우, 유저 정보가 어떻게 오는 지 주석을 풀고 확인해봐요!\n          //   console.log(user);\n\n          //   리덕스에도 유저 정보를 저장해줍니다.\n          dispatch(\n            setUser({\n              user_name: user.user.displayName,\n              id: id,\n              user_profile: \"\",\n              uid: user.user.uid,\n            })\n          );\n\n          // 미들웨어에서 페이지 이동하기!\n          // 이걸 위해서 configureStore.js에서 뭘 해줬는 지 다시 한 번 확인해보고 오세요!\n          window.alert(\"로그인 완료!\");\n          history.push(\"/\");\n        })\n        .catch((error) => {\n          // 로그인 실패하면 alert으로 알려줄거예요!\n          // 여기에 팝업을 띄워주거나, 왜 실패했는 지 알려주는 등 다른 작업도 해볼 수 있겠죠! :)\n          // (시간이 남으면 해보세요!)\n          window.alert(\"로그인 실패!\");\n\n          var errorCode = error.code;\n          var errorMessage = error.message;\n\n          console.log(errorCode, errorMessage);\n        });\n    });\n  };\n};\n\n// 회원가입\n/**\n *\n * @param {*} id 아이디\n * @param {*} pwd 패스워드\n * @param {*} user_name 닉네임 (유저 네임)\n * @returns\n */\nconst signupFB = (id, pwd, user_name) => {\n  return function (dispatch, getState, { history }) {\n    auth\n      .createUserWithEmailAndPassword(id, pwd)\n      .then((user) => {\n        console.log(user);\n\n        auth.currentUser\n          .updateProfile({\n            displayName: user_name,\n          })\n          .then(() => {\n            dispatch(\n              setUser({\n                user_name: user_name,\n                id: id,\n                user_profile: \"\",\n                uid: user.user.uid,\n              })\n            );\n            window.alert(\"회원가입을 축하합니다!\");\n            history.push(\"/\");\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n\n        // Signed in\n        // ...\n      })\n      .catch((error) => {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n\n        console.log(errorCode, errorMessage);\n        // ..\n      });\n  };\n};\n\n// 로그인했는 지 아닌 지 체크, 만약 파이어베이스에 로그인한 상태라면? 리덕스에도 유저 정보를 넣어줍니다.\nconst loginCheckFB = () => {\n  return function (dispatch, getState, { history }) {\n    // 유저 정보를 가져옵니다.\n    auth.onAuthStateChanged((user) => {\n      // 유저 정보가 있으면 리덕스에 유저 정보 넣어주기\n      if (user) {\n        dispatch(\n          setUser({\n            user_name: user.displayName,\n            user_profile: \"\",\n            id: user.email,\n            uid: user.uid,\n          })\n        );\n      } else {\n        //   없으면 파이어베이스에서도 로그아웃 합니다.\n        dispatch(logoutFB());\n      }\n    });\n  };\n};\n\n// 로그아웃\nconst logoutFB = () => {\n  return function (dispatch, getState, { history }) {\n    //   파이어베이스에서 로그아웃하고,\n    auth.signOut().then(() => {\n      // 성공하면 리덕스에서도 유저 정보를 삭제하고, is_login 상태를 false로 바꿔줍니다.\n      dispatch(logOut());\n      //   그리고 메인 페이지로 이동해요!\n      history.replace(\"/\");\n    });\n  };\n};\n\n// reducer\nexport default handleActions(\n  {\n    [SET_USER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.user = action.payload.user;\n        draft.is_login = true;\n      }),\n    [LOG_OUT]: (state, action) =>\n      produce(state, (draft) => {\n        draft.user = null;\n        draft.is_login = false;\n      }),\n    [GET_USER]: (state, action) => produce(state, (draft) => {}),\n  },\n  initialState\n);\n\n// 만든 액션생성자들(+중간다리들)을 외부에서 호출할 수 있도록 내보내줍니다. 내보낼 필요가 없는 건 굳이 내보내지 않아도 괜찮아요!\nconst actionCreators = {\n  logOut,\n  getUser,\n  signupFB,\n  loginFB,\n  loginCheckFB,\n  logoutFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}