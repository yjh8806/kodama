{"ast":null,"code":"var _jsxFileName = \"/Users/frankie/sparta/hanghae_react/magazine_test/src/pages/Signup.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Text, Input, Button } from \"../elements\";\nimport { useDispatch } from \"react-redux\";\nimport { actionCreators as userActions } from \"../redux/modules/user\"; // 이메일 형식 체크하는 함수를 가져옵니다.\n\nimport { emailCheck } from \"../shared/common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Signup = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [id, setId] = React.useState(\"\");\n  const [pwd, setPwd] = React.useState(\"\");\n  const [pwd_check, setPwdCheck] = React.useState(\"\");\n  const [user_name, setUserName] = React.useState(\"\");\n\n  const signup = () => {\n    // 아이디와 패스워드, 유저 닉네임이 있는 지 확인!\n    // 미들웨어에서 처리해도 괜찮지만, 딱봐도 어림없는 값(공백 등등)이 굳이 미들웨어까지 갈 필요 없으니 여기에서 막아줄거예요.\n    if (id === \"\" || pwd === \"\" || pwd_check === \"\" || user_name === \"\") {\n      window.alert(\"아이디, 패스워드, 닉네임을 모두 입력해주세요!\");\n      return;\n    } // id가 이메일 형식이 맞나 확인!\n\n\n    if (!emailCheck(id)) {\n      window.alert(\"이메일 형식이 맞지 않습니다!\");\n      return;\n    } // 비밀번호와 비밀번호 확인 부분이 일치하나 확인!\n\n\n    if (pwd !== pwd_check) {\n      window.alert(\"패스워드와 패스워드 확인이 일치하지 않습니다!\");\n      return;\n    } // 회원가입 함수를 디스패치합니다.(비밀번호 확인은 비밀번호와 똑같으니 굳이 넘기지 않았어요!)\n\n\n    dispatch(userActions.signupFB(id, pwd, user_name));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      padding: \"16px\",\n      height: \"83vh\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        size: \"32px\",\n        bold: true,\n        children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        padding: \"16px 0px\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          label: \"\\uC544\\uC774\\uB514\",\n          placeholder: \"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          _onChange: e => {\n            setId(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        padding: \"16px 0px\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          label: \"\\uB2C9\\uB124\\uC784\",\n          placeholder: \"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          _onChange: e => {\n            setUserName(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        padding: \"16px 0px\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          label: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n          type: \"password\",\n          placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          _onChange: e => {\n            setPwd(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        padding: \"16px 0px\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n          type: \"password\",\n          placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          _onChange: e => {\n            setPwdCheck(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        _onClick: signup,\n        children: \"\\uD68C\\uC6D0\\uAC00\\uC785\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Signup, \"LwFmL5eZ3J82fcBZj7dQDuOsI/U=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Signup;\nSignup.defaultProps = {};\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/pages/Signup.js"],"names":["React","Grid","Text","Input","Button","useDispatch","actionCreators","userActions","emailCheck","Signup","props","dispatch","id","setId","useState","pwd","setPwd","pwd_check","setPwdCheck","user_name","setUserName","signup","window","alert","signupFB","e","target","value","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid, Text, Input, Button } from \"../elements\";\n\nimport { useDispatch } from \"react-redux\";\nimport { actionCreators as userActions } from \"../redux/modules/user\";\n\n// 이메일 형식 체크하는 함수를 가져옵니다.\nimport { emailCheck } from \"../shared/common\";\n\nconst Signup = (props) => {\n  const dispatch = useDispatch();\n\n  const [id, setId] = React.useState(\"\");\n  const [pwd, setPwd] = React.useState(\"\");\n  const [pwd_check, setPwdCheck] = React.useState(\"\");\n  const [user_name, setUserName] = React.useState(\"\");\n\n  const signup = () => {\n    // 아이디와 패스워드, 유저 닉네임이 있는 지 확인!\n    // 미들웨어에서 처리해도 괜찮지만, 딱봐도 어림없는 값(공백 등등)이 굳이 미들웨어까지 갈 필요 없으니 여기에서 막아줄거예요.\n    if (id === \"\" || pwd === \"\" || pwd_check === \"\" || user_name === \"\") {\n      window.alert(\"아이디, 패스워드, 닉네임을 모두 입력해주세요!\");\n      return;\n    }\n\n    // id가 이메일 형식이 맞나 확인!\n    if (!emailCheck(id)) {\n      window.alert(\"이메일 형식이 맞지 않습니다!\");\n      return;\n    }\n\n    // 비밀번호와 비밀번호 확인 부분이 일치하나 확인!\n    if (pwd !== pwd_check) {\n      window.alert(\"패스워드와 패스워드 확인이 일치하지 않습니다!\");\n      return;\n    }\n\n    // 회원가입 함수를 디스패치합니다.(비밀번호 확인은 비밀번호와 똑같으니 굳이 넘기지 않았어요!)\n    dispatch(userActions.signupFB(id, pwd, user_name));\n  };\n  return (\n    <React.Fragment>\n      <Grid padding=\"16px\" height=\"83vh\">\n        <Text size=\"32px\" bold>\n          회원가입\n        </Text>\n\n        <Grid padding=\"16px 0px\">\n          <Input\n            label=\"아이디\"\n            placeholder=\"아이디를 입력해주세요.\"\n            _onChange={(e) => {\n              setId(e.target.value);\n            }}\n          />\n        </Grid>\n\n        <Grid padding=\"16px 0px\">\n          <Input\n            label=\"닉네임\"\n            placeholder=\"닉네임을 입력해주세요.\"\n            _onChange={(e) => {\n              setUserName(e.target.value);\n            }}\n          />\n        </Grid>\n\n        <Grid padding=\"16px 0px\">\n          <Input\n            label=\"비밀번호\"\n            type=\"password\"\n            placeholder=\"비밀번호를 입력해주세요.\"\n            _onChange={(e) => {\n              setPwd(e.target.value);\n            }}\n          />\n        </Grid>\n\n        <Grid padding=\"16px 0px\">\n          <Input\n            label=\"비밀번호 확인\"\n            type=\"password\"\n            placeholder=\"비밀번호를 다시 입력해주세요.\"\n            _onChange={(e) => {\n              setPwdCheck(e.target.value);\n            }}\n          />\n        </Grid>\n\n        <Button _onClick={signup}>회원가입하기</Button>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nSignup.defaultProps = {};\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}