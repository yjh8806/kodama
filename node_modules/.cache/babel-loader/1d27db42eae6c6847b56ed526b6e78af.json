{"ast":null,"code":"var _jsxFileName = \"/Users/frankie/sparta/hanghae_react/magazine_test/src/pages/Login.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Text, Input, Grid, Button } from \"../elements\";\nimport { useDispatch } from \"react-redux\";\nimport { actionCreators as userActions } from \"../redux/modules/user\"; // 이메일 형식 체크하는 함수를 가져옵니다.\n\nimport { emailCheck } from \"../shared/common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [id, setId] = React.useState(\"\");\n  const [pwd, setPwd] = React.useState(\"\");\n\n  const login = () => {\n    //   아이디가 잘 들어와있나 아래 주석을 풀고 확인해보세요! :)\n    // console.log(id);\n    // 아이디와 패스워드가 있는 지 확인!\n    // 미들웨어에서 처리해도 괜찮지만, 딱봐도 어림없는 값(공백 등등)이 굳이 미들웨어까지 갈 필요 없으니 여기에서 막아줄거예요.\n    if (id === \"\" || pwd === \"\") {\n      window.alert(\"아이디 혹은 비밀번호가 공란입니다! 입력해주세요!\");\n      return;\n    }\n\n    if (id === \"\") {\n      window.alert(\"아이디를 입력해주세요!\");\n      return;\n    }\n\n    if (pwd === \"\") {\n      window.alert(\"비밀번호를 입력해주세요\");\n    } // id가 이메일 형식이 맞나 확인!\n\n\n    if (!emailCheck(id)) {\n      window.alert(\"이메일 형식이 맞지 않습니다!\");\n      return;\n    } // 파이어베이스 로그인을 담당하는 함수를 디스패치했어요.\n\n\n    dispatch(userActions.loginFB(id, pwd));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      padding: \"16px\",\n      height: \"93.1vh\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        size: \"32px\",\n        bold: true,\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        padding: \"16px 0px\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          label: \"\\uC544\\uC774\\uB514\",\n          placeholder: \"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          _onChange: e => {\n            setId(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        padding: \"16px 0px\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          label: \"\\uD328\\uC2A4\\uC6CC\\uB4DC\",\n          placeholder: \"\\uD328\\uC2A4\\uC6CC\\uB4DC \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          type: \"password\",\n          _onChange: e => {\n            setPwd(e.target.value);\n          },\n          value: pwd,\n          is_submit: true,\n          onSubmit: login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        _onClick: () => {\n          login();\n        },\n        children: \"\\uB85C\\uADF8\\uC778\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"IeOQiE9KTi/5XVkREGntlAmA3zI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/pages/Login.js"],"names":["React","Text","Input","Grid","Button","useDispatch","actionCreators","userActions","emailCheck","Login","props","dispatch","id","setId","useState","pwd","setPwd","login","window","alert","loginFB","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,MAA5B,QAA0C,aAA1C;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAc,IAAIC,WAA3B,QAA8C,uBAA9C,C,CAEA;;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAM,CAACO,EAAD,EAAKC,KAAL,IAAcb,KAAK,CAACc,QAAN,CAAe,EAAf,CAApB;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBhB,KAAK,CAACc,QAAN,CAAe,EAAf,CAAtB;;AAEA,QAAMG,KAAK,GAAG,MAAM;AAClB;AACA;AAEA;AACA;AACA,QAAIL,EAAE,KAAK,EAAP,IAAaG,GAAG,KAAK,EAAzB,EAA6B;AAC3BG,MAAAA,MAAM,CAACC,KAAP,CAAa,6BAAb;AACA;AACD;;AACD,QAAIP,EAAE,KAAK,EAAX,EAAe;AACbM,MAAAA,MAAM,CAACC,KAAP,CAAa,cAAb;AACE;AACH;;AACD,QAAIJ,GAAG,KAAK,EAAZ,EAAgB;AACdG,MAAAA,MAAM,CAACC,KAAP,CAAa,cAAb;AACD,KAhBiB,CAkBlB;;;AACA,QAAI,CAACX,UAAU,CAACI,EAAD,CAAf,EAAqB;AACnBM,MAAAA,MAAM,CAACC,KAAP,CAAa,kBAAb;AACA;AACD,KAtBiB,CAwBlB;;;AACAR,IAAAA,QAAQ,CAACJ,WAAW,CAACa,OAAZ,CAAoBR,EAApB,EAAwBG,GAAxB,CAAD,CAAR;AACD,GA1BD;;AA4BA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAC,MAAd;AAAqB,MAAA,MAAM,EAAC,QAA5B;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,IAAI,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,IAAD;AAAM,QAAA,OAAO,EAAC,UAAd;AAAA,+BACE,QAAC,KAAD;AACE,UAAA,KAAK,EAAC,oBADR;AAEE,UAAA,WAAW,EAAC,gEAFd;AAGE,UAAA,SAAS,EAAGM,CAAD,IAAO;AAChBR,YAAAA,KAAK,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAL;AACD;AALH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF,eAeE,QAAC,IAAD;AAAM,QAAA,OAAO,EAAC,UAAd;AAAA,+BACE,QAAC,KAAD;AACE,UAAA,KAAK,EAAC,0BADR;AAEE,UAAA,WAAW,EAAC,gEAFd;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,UAAA,SAAS,EAAGF,CAAD,IAAO;AAChBL,YAAAA,MAAM,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACD,WANH;AAOE,UAAA,KAAK,EAAER,GAPT;AAQE,UAAA,SAAS,MARX;AASE,UAAA,QAAQ,EAAEE;AATZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAfF,eA6BE,QAAC,MAAD;AACE,QAAA,QAAQ,EAAE,MAAM;AACdA,UAAAA,KAAK;AACN,SAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD,CA3ED;;GAAMR,K;UACaJ,W;;;KADbI,K;AA6EN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport { Text, Input, Grid, Button } from \"../elements\";\n\nimport { useDispatch } from \"react-redux\";\nimport { actionCreators as userActions } from \"../redux/modules/user\";\n\n// 이메일 형식 체크하는 함수를 가져옵니다.\nimport { emailCheck } from \"../shared/common\";\n\nconst Login = (props) => {\n  const dispatch = useDispatch();\n\n  const [id, setId] = React.useState(\"\");\n  const [pwd, setPwd] = React.useState(\"\");\n\n  const login = () => {\n    //   아이디가 잘 들어와있나 아래 주석을 풀고 확인해보세요! :)\n    // console.log(id);\n\n    // 아이디와 패스워드가 있는 지 확인!\n    // 미들웨어에서 처리해도 괜찮지만, 딱봐도 어림없는 값(공백 등등)이 굳이 미들웨어까지 갈 필요 없으니 여기에서 막아줄거예요.\n    if (id === \"\" || pwd === \"\") {\n      window.alert(\"아이디 혹은 비밀번호가 공란입니다! 입력해주세요!\");\n      return;\n    }\n    if (id === \"\") {\n      window.alert(\"아이디를 입력해주세요!\");\n        return;\n    }\n    if (pwd === \"\") {\n      window.alert(\"비밀번호를 입력해주세요\");\n    }\n\n    // id가 이메일 형식이 맞나 확인!\n    if (!emailCheck(id)) {\n      window.alert(\"이메일 형식이 맞지 않습니다!\");\n      return;\n    }\n\n    // 파이어베이스 로그인을 담당하는 함수를 디스패치했어요.\n    dispatch(userActions.loginFB(id, pwd));\n  };\n\n  return (\n    <React.Fragment>\n      <Grid padding=\"16px\" height=\"93.1vh\">\n        <Text size=\"32px\" bold>\n          로그인\n        </Text>\n\n        <Grid padding=\"16px 0px\">\n          <Input\n            label=\"아이디\"\n            placeholder=\"아이디를 입력해주세요.\"\n            _onChange={(e) => {\n              setId(e.target.value);\n            }}\n          />\n        </Grid>\n\n        <Grid padding=\"16px 0px\">\n          <Input\n            label=\"패스워드\"\n            placeholder=\"패스워드 입력해주세요.\"\n            type=\"password\"\n            _onChange={(e) => {\n              setPwd(e.target.value);\n            }}\n            value={pwd}\n            is_submit\n            onSubmit={login}\n          />\n        </Grid>\n\n        <Button\n          _onClick={() => {\n            login();\n          }}\n        >\n          로그인하기\n        </Button>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}