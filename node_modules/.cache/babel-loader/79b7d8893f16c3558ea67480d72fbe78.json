{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DELETE_POST = \"DELETE_POST\";\nconst LOADING = \"LOADING\";\nconst SET_LIKE = \"SET_LIKE\";\nconst setPost = createAction(SET_POST, (post_list, paging) => ({\n  post_list,\n  paging\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst deletePost = createAction(DELETE_POST, post_id => ({\n  post_id\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: [],\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false\n}; // 포스트에 들어가야만 하는 기본 정보를 미리 하나 만들어요! (매번 적기는 귀찮으니까..!)\n// layout_type : a, b, c\n//  - a : 텍스트가 위, 이미지가 아래인 레이아웃\n//  - b : 텍스트가 좌측, 이미지가 우측인 레이아웃\n//  - c : 텍스트가 우측, 이미지가 좌측인 레이아웃\n// image_url : 이미지 주소\n// like_cnt : 좋아요 갯수\n// insert_dt : 작성일시\n\nconst initialPost = {\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"\",\n  like_cnt: 0,\n  layout_type: \"a\",\n  insert_dt: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n}; // 게시글 수정하기\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    } // 프리뷰 이미지를 가져옵니다.\n\n\n    const _image = getState().image.preview; // 수정하려는 게시글이 게시글 목록에서 몇 번째에 있나 확인합니다.\n\n    const _post_idx = getState().post.list.findIndex(p => p.id === post_id); // 수정하려는 게시글 정보를 가져옵니다. (수정 전 정보겠죠!)\n\n\n    const _post = getState().post.list[_post_idx]; // 아래의 주석을 풀고 확인해보세요!\n    // console.log(_post);\n    // 파이어스토어에서 콜렉션 선택하기\n\n\n    const postDB = firestore.collection(\"post\"); // 현재 프리뷰의 이미지와 게시글 정보에 있는 이미지가 같은 지 확인합니다.\n    // 같다면 이미지 업로드는 할 필요 없겠죠!\n\n    if (_image === _post.image_url) {\n      // 게시글 정보를 수정해요!\n      postDB.doc(post_id).update(post).then(doc => {\n        dispatch(editPost(post_id, { ...post\n        })); //   프리뷰는 이제 null로 바꿔줍니다!\n\n        dispatch(imageActions.setPreview(null));\n        window.alert(\"게시글 수정F 완료!\");\n        history.replace(\"/\");\n      });\n      return;\n    } else {\n      // 유저 정보를 가져와요 (유저 id!)\n      const user_id = getState().user.user.uid; // 이미지를 data_url 방식으로 업로드하도록 준비!\n\n      const _upload = storage.ref(`images/${user_id}_${new Date().getTime()}`).putString(_image, \"data_url\"); // 이미지를 업로드하고,\n\n\n      _upload.then(snapshot => {\n        //   업로드한 뒤 링크를 가져옵니다. (업로드한 이미지의 경로를 가져와요.)\n        snapshot.ref.getDownloadURL().then(url => {\n          //   아래 주석을 풀고 경로를 확인해보세요 :)\n          // console.log(url);\n          return url;\n        }).then(url => {\n          // 경로를 가지고 게시글 정보를 수정해줍니다.\n          postDB.doc(post_id).update({ ...post,\n            image_url: url\n          }).then(doc => {\n            //   리덕스에도 수정한 정보를 넣어줘요.\n            dispatch(editPost(post_id, { ...post,\n              image_url: url\n            })); //   프리뷰는 이제 null로 바꿔줍니다!\n\n            dispatch(imageActions.setPreview(null)); // 수정이 끝났으니, / 경로로 돌아갑니다.\n\n            history.replace(\"/\");\n          });\n        }).catch(err => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n      });\n    }\n  };\n}; // 게시글 추가하기\n\n\nconst addPostFB = (contents = \"\", layout_type = \"a\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    //  파이어스토어에서 콜렉션부터 잡아줍니다.\n    const postDB = firestore.collection(\"post\"); // 게시글 작성자 (로그인한 유저겠죠!) 정보를 가져와요.\n\n    const _user = getState().user.user; // 유저 정보를 꾸려주고,\n\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    }; // 게시글 정보도 꾸려줘요.\n\n    const _post = { ...initialPost,\n      contents: contents,\n      layout_type: layout_type,\n      insert_dt: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    }; // 이미지도 가져옵니다.\n\n    const _image = getState().image.preview; // 만약 이미지가 없으면? 경고를 띄워주고 업로드하지 않아요!\n\n    if (!_image) {\n      window.alert(\"이미지가 필요해요!\");\n      return;\n    } // 이미지 업로드 먼저! (이미지 업로드가 실패하면 게시글도 업로드 하지 않게!)\n\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        return url;\n      }).then(url => {\n        // 이미지 업로드가 무사히 잘 끝났다면, 이제 게시글 정보를 파이어스토어에 넣어줍니다.\n        // 주의! 파이어스토어에는 리덕스에서 관리하는 것과 조금 다르게 게시글 1개 정보를 관리할거예요.\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          };\n          dispatch(addPost(post));\n          window.alert(\"게시글 작성 완료!\");\n          history.replace(\"/\"); //   프리뷰는 이제 null로 바꿔줍니다!\n\n          dispatch(imageActions.setPreview(null));\n        }).catch(err => {\n          window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n          console.log(\"post 작성에 실패했어요!\", err);\n        });\n      }).catch(err => {\n        window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n        console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n      });\n    });\n  };\n}; // 게시글 가져오기\n\n\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    //   가장 먼저 페이징 정보를 가져와요.\n    let _paging = getState().post.paging; // 시작점이 있고, 다음 게시글이 없다면? 더 가져올 게 없다는 뜻이니 return!\n\n    if (_paging.start && !_paging.next) {\n      return;\n    } // 가져오기 중일 때는 loading을 true로 바꿔줍니다.\n    // 연속해서 계속 불러오는 걸 방지하기 위함입니다.\n\n\n    dispatch(loading(true)); // 파이어스토어에서 post 콜렉션을 먼저 잡아주고,\n\n    const postDB = firestore.collection(\"post\"); // 쿼리를 작성해요!\n    // 작성일 기준으로 역순 정렬할거예요.\n    // +) asc, desc를 왔다갔다 하면서 정렬을 바꿔보세요!\n\n    let query = postDB.orderBy(\"insert_dt\", \"desc\"); // 만약 시작점이 있다면? (start는 매개변수로 가져오는 걸 잊으면 안됩니다! -> getPostFB를 부를 때는? paging의 next 값을 start로 넘겨주겠죠!)\n\n    if (start) {\n      // 쿼리에 몇번째 게시글부터 가져올 지, 시작점 정보를 추가해줍니다.\n      query = query.startAt(start);\n    } // 우리가 미리 지정한 사이즈(갯수)보다 1개 더 많이 가져올거예요.\n    // 그래야 next에 무언가를 넣어서 다음에 또 불러올 게 있나 없나 판단할 수 있어요.\n\n\n    query.limit(size + 1).get().then(docs => {\n      let post_list = []; // 페이징 정보를 만들어줘요.\n      // start는 지금 가져온 데이터의 첫번째 걸로,\n      // next는 가져온 데이터의 길이를 보고 지정 사이즈보다 +1개면 마지막 데이터를,\n      // 지금 사이즈와 같거나 작으면 null을 넣어줘요.\n\n      let paging = {\n        start: docs.docs[0],\n        next: docs.docs.length === size + 1 ? docs.docs[docs.docs.length - 1] : null,\n        size: size\n      }; // 이제 파이어스토어에서 가져온 데이터를 리덕스에 넣기 좋게 만들어요!\n\n      docs.forEach(doc => {\n        let _post = doc.data(); // reduce로 데이터를 정제해요!\n        // reduce 사용법이 익숙하지 않으시다면 reduce 사용법 검색해보기!\n        //  게시글 하나는 딕셔너리 형태예요.\n        // 이 딕셔너리 형태 데이터의 키만 가지고 배열을 만들어 reduce를 돌립니다.\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          // acc는 누적 값, cur은 현재 값이에요.\n          // 현재 값(key 값 중 하나겠죠!)에 user_가 들어있다면?\n          if (cur.indexOf(\"user_\") !== -1) {\n            //   user_info에 현재 키값과 현재 키를 사용해 가져온 밸류를 누적 딕셔너리에 추가해줍니다.\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          } //   user_가 없다면? 누적 딕셔너리에 바로 넣어주기!\n\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        }); //   정제한 데이터를 post_list에 넣어줘요.\n\n        post_list.push(post);\n      }); // 마지막 1개는 빼줘요! (다음 번 리스트에 있어야할 값이니까요!)\n\n      if (paging.next) {\n        post_list.pop();\n      } // post_list를 확인해봅시다!\n      // console.log(post_list);\n      // 이제 게시글 목록을 리덕스에 넣어줍시다!\n\n\n      dispatch(setPost(post_list, paging));\n    });\n  };\n}; // 게시글 하나만 가져오기\n// 상세페이지 등에 바로 접근할 때를 대비해서 게시글 하나만 가져오는 함수도 만들어요.\n\n\nconst getOnePostFB = id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.doc(id).get().then(doc => {\n      let _post = doc.data();\n\n      let post = Object.keys(_post).reduce((acc, cur) => {\n        if (cur.indexOf(\"user_\") !== -1) {\n          return { ...acc,\n            user_info: { ...acc.user_info,\n              [cur]: _post[cur]\n            }\n          };\n        }\n\n        return { ...acc,\n          [cur]: _post[cur]\n        };\n      }, {\n        id: doc.id,\n        user_info: {}\n      }); // 하나를 가져오지만, 게시글 목록은 배열이잖아요! 배열 형태에 맞게 []로 싸줍니다.\n\n      dispatch(setPost([post]));\n    });\n  };\n}; // 게시글 삭제하기\n\n\nconst deletePostFB = id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    // id가 없으면 return!\n    if (!id) {\n      window.alert(\"삭제할 수 없는 게시글이에요!\");\n      return;\n    }\n\n    const postDB = firestore.collection(\"post\"); // 게시글 id로 선택해서 삭제하기!\n\n    postDB.doc(id).delete().then(res => {\n      dispatch(deletePost(id));\n      history.replace(\"/\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 리듀서\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    //   데이터를 기존 데이터에 추가해요.\n    draft.list.push(...action.payload.post_list);\n    draft.list = draft.list.reduce((acc, cur) => {\n      if (acc.findIndex(a => a.id === cur.id) === -1) {\n        return [...acc, cur];\n      } else {\n        acc[acc.findIndex(a => a.id === cur.id)] = cur;\n        return acc;\n      }\n    }, []); // 페이징도 넣어줍니다.\n\n    if (action.payload.paging) {\n      draft.paging = action.payload.paging;\n    } // 리듀서에 기록할 때는 이미 로딩이 끝났겠죠! 여기에서 false로 바꿔줘요.\n    // 액션을 따로 호출해도 좋지만, 무조건 is_loading이 false 되는 지점에서는 굳이 액션을 두번 일으키기 보단\n    // 이런 식으로 바로 바꿔주는 게 좋아요.\n\n\n    draft.is_loading = false;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    // 데이터를 배열 맨 앞에 넣어줍니다.\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    // 배열의 몇 번째에 있는 지 찾습니다.\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id); // 해당 위치에 넣어줍니다.\n\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  }),\n  [DELETE_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id);\n\n    if (idx !== -1) {\n      // 배열에서 idx 위치의 요소 1개를 지웁니다.\n      draft.list.splice(idx, 1);\n    }\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    //   데이터를 가져오는 중인 지 여부를 작성합니다.\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n  getOnePostFB,\n  deletePostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","SET_POST","ADD_POST","EDIT_POST","DELETE_POST","LOADING","SET_LIKE","setPost","post_list","paging","addPost","post","editPost","post_id","deletePost","loading","is_loading","initialState","list","start","next","size","initialPost","image_url","contents","like_cnt","layout_type","insert_dt","format","editPostFB","dispatch","getState","history","console","log","_image","image","preview","_post_idx","findIndex","p","id","_post","postDB","collection","doc","update","then","setPreview","window","alert","replace","user_id","user","uid","_upload","ref","Date","getTime","putString","snapshot","getDownloadURL","url","catch","err","addPostFB","_user","user_info","user_name","user_profile","add","getPostFB","_paging","query","orderBy","startAt","limit","get","docs","length","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","pop","getOnePostFB","deletePostFB","delete","res","state","action","draft","payload","a","unshift","idx","splice"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,uBAAnC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,cAAc,IAAIC,YAA3B,QAA+C,SAA/C;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,MAAMC,OAAO,GAAGd,YAAY,CAACQ,QAAD,EAAW,CAACO,SAAD,EAAYC,MAAZ,MAAwB;AAC7DD,EAAAA,SAD6D;AAE7DC,EAAAA;AAF6D,CAAxB,CAAX,CAA5B;AAIA,MAAMC,OAAO,GAAGjB,YAAY,CAACS,QAAD,EAAYS,IAAD,KAAW;AAAEA,EAAAA;AAAF,CAAX,CAAX,CAA5B;AACA,MAAMC,QAAQ,GAAGnB,YAAY,CAACU,SAAD,EAAY,CAACU,OAAD,EAAUF,IAAV,MAAoB;AAC3DE,EAAAA,OAD2D;AAE3DF,EAAAA;AAF2D,CAApB,CAAZ,CAA7B;AAIA,MAAMG,UAAU,GAAGrB,YAAY,CAACW,WAAD,EAAeS,OAAD,KAAc;AAAEA,EAAAA;AAAF,CAAd,CAAd,CAA/B;AACA,MAAME,OAAO,GAAGtB,YAAY,CAACY,OAAD,EAAWW,UAAD,KAAiB;AAAEA,EAAAA;AAAF,CAAjB,CAAV,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBT,EAAAA,MAAM,EAAE;AAAEU,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,IAAI,EAAE,IAArB;AAA2BC,IAAAA,IAAI,EAAE;AAAjC,GAFW;AAGnBL,EAAAA,UAAU,EAAE;AAHO,CAArB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMM,WAAW,GAAG;AAClBC,EAAAA,SAAS,EAAE,4DADO;AAElBC,EAAAA,QAAQ,EAAE,EAFQ;AAGlBC,EAAAA,QAAQ,EAAE,CAHQ;AAIlBC,EAAAA,WAAW,EAAE,GAJK;AAKlBC,EAAAA,SAAS,EAAE7B,MAAM,GAAG8B,MAAT,CAAgB,qBAAhB;AALO,CAApB,C,CAQA;;AACA,MAAMC,UAAU,GAAG,CAAChB,OAAO,GAAG,IAAX,EAAiBF,IAAI,GAAG,EAAxB,KAA+B;AAChD,SAAO,UAAUmB,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChD,QAAI,CAACnB,OAAL,EAAc;AACZoB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA;AACD,KAJ+C,CAMhD;;;AACA,UAAMC,MAAM,GAAGJ,QAAQ,GAAGK,KAAX,CAAiBC,OAAhC,CAPgD,CAShD;;AACA,UAAMC,SAAS,GAAGP,QAAQ,GAAGpB,IAAX,CAAgBO,IAAhB,CAAqBqB,SAArB,CAAgCC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAAS5B,OAA/C,CAAlB,CAVgD,CAWhD;;;AACA,UAAM6B,KAAK,GAAGX,QAAQ,GAAGpB,IAAX,CAAgBO,IAAhB,CAAqBoB,SAArB,CAAd,CAZgD,CAahD;AACA;AAEA;;;AACA,UAAMK,MAAM,GAAG/C,SAAS,CAACgD,UAAV,CAAqB,MAArB,CAAf,CAjBgD,CAmBhD;AACA;;AACA,QAAIT,MAAM,KAAKO,KAAK,CAACnB,SAArB,EAAgC;AAC9B;AACAoB,MAAAA,MAAM,CACHE,GADH,CACOhC,OADP,EAEGiC,MAFH,CAEUnC,IAFV,EAGGoC,IAHH,CAGSF,GAAD,IAAS;AACbf,QAAAA,QAAQ,CAAClB,QAAQ,CAACC,OAAD,EAAU,EAAE,GAAGF;AAAL,SAAV,CAAT,CAAR,CADa,CAEb;;AACAmB,QAAAA,QAAQ,CAAC9B,YAAY,CAACgD,UAAb,CAAwB,IAAxB,CAAD,CAAR;AACAC,QAAAA,MAAM,CAACC,KAAP,CAAa,aAAb;AACAlB,QAAAA,OAAO,CAACmB,OAAR,CAAgB,GAAhB;AACD,OATH;AAUA;AACD,KAbD,MAaO;AACL;AACA,YAAMC,OAAO,GAAGrB,QAAQ,GAAGsB,IAAX,CAAgBA,IAAhB,CAAqBC,GAArC,CAFK,CAGL;;AACA,YAAMC,OAAO,GAAG1D,OAAO,CACpB2D,GADa,CACR,UAASJ,OAAQ,IAAG,IAAIK,IAAJ,GAAWC,OAAX,EAAqB,EADjC,EAEbC,SAFa,CAEHxB,MAFG,EAEK,UAFL,CAAhB,CAJK,CAQL;;;AACAoB,MAAAA,OAAO,CAACR,IAAR,CAAca,QAAD,IAAc;AACzB;AACAA,QAAAA,QAAQ,CAACJ,GAAT,CACGK,cADH,GAEGd,IAFH,CAESe,GAAD,IAAS;AACb;AACA;AAEA,iBAAOA,GAAP;AACD,SAPH,EAQGf,IARH,CAQSe,GAAD,IAAS;AACb;AACAnB,UAAAA,MAAM,CACHE,GADH,CACOhC,OADP,EAEGiC,MAFH,CAEU,EAAE,GAAGnC,IAAL;AAAWY,YAAAA,SAAS,EAAEuC;AAAtB,WAFV,EAGGf,IAHH,CAGSF,GAAD,IAAS;AACb;AACAf,YAAAA,QAAQ,CAAClB,QAAQ,CAACC,OAAD,EAAU,EAAE,GAAGF,IAAL;AAAWY,cAAAA,SAAS,EAAEuC;AAAtB,aAAV,CAAT,CAAR,CAFa,CAGb;;AACAhC,YAAAA,QAAQ,CAAC9B,YAAY,CAACgD,UAAb,CAAwB,IAAxB,CAAD,CAAR,CAJa,CAKb;;AACAhB,YAAAA,OAAO,CAACmB,OAAR,CAAgB,GAAhB;AACD,WAVH;AAWD,SArBH,EAsBGY,KAtBH,CAsBUC,GAAD,IAAS;AACdf,UAAAA,MAAM,CAACC,KAAP,CAAa,sBAAb;AACAjB,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC8B,GAApC;AACD,SAzBH;AA0BD,OA5BD;AA6BD;AACF,GAzED;AA0ED,CA3ED,C,CA6EA;;;AACA,MAAMC,SAAS,GAAG,CAACzC,QAAQ,GAAG,EAAZ,EAAgBE,WAAW,GAAG,GAA9B,KAAsC;AACtD,SAAO,UAAUI,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChD;AACA,UAAMW,MAAM,GAAG/C,SAAS,CAACgD,UAAV,CAAqB,MAArB,CAAf,CAFgD,CAIhD;;AACA,UAAMsB,KAAK,GAAGnC,QAAQ,GAAGsB,IAAX,CAAgBA,IAA9B,CALgD,CAOhD;;AACA,UAAMc,SAAS,GAAG;AAChBC,MAAAA,SAAS,EAAEF,KAAK,CAACE,SADD;AAEhBhB,MAAAA,OAAO,EAAEc,KAAK,CAACZ,GAFC;AAGhBe,MAAAA,YAAY,EAAEH,KAAK,CAACG;AAHJ,KAAlB,CARgD,CAchD;;AACA,UAAM3B,KAAK,GAAG,EACZ,GAAGpB,WADS;AAEZE,MAAAA,QAAQ,EAAEA,QAFE;AAGZE,MAAAA,WAAW,EAAEA,WAHD;AAIZC,MAAAA,SAAS,EAAE7B,MAAM,GAAG8B,MAAT,CAAgB,qBAAhB;AAJC,KAAd,CAfgD,CAsBhD;;AACA,UAAMO,MAAM,GAAGJ,QAAQ,GAAGK,KAAX,CAAiBC,OAAhC,CAvBgD,CAyBhD;;AACA,QAAI,CAACF,MAAL,EAAa;AACXc,MAAAA,MAAM,CAACC,KAAP,CAAa,YAAb;AACA;AACD,KA7B+C,CA8BhD;;;AACA,UAAMK,OAAO,GAAG1D,OAAO,CACpB2D,GADa,CACR,UAASW,SAAS,CAACf,OAAQ,IAAG,IAAIK,IAAJ,GAAWC,OAAX,EAAqB,EAD3C,EAEbC,SAFa,CAEHxB,MAFG,EAEK,UAFL,CAAhB;;AAIAoB,IAAAA,OAAO,CAACR,IAAR,CAAca,QAAD,IAAc;AACzBA,MAAAA,QAAQ,CAACJ,GAAT,CACGK,cADH,GAEGd,IAFH,CAESe,GAAD,IAAS;AACb,eAAOA,GAAP;AACD,OAJH,EAKGf,IALH,CAKSe,GAAD,IAAS;AACb;AACA;AACAnB,QAAAA,MAAM,CACH2B,GADH,CACO,EAAE,GAAGH,SAAL;AAAgB,aAAGzB,KAAnB;AAA0BnB,UAAAA,SAAS,EAAEuC;AAArC,SADP,EAEGf,IAFH,CAESF,GAAD,IAAS;AACb,cAAIlC,IAAI,GAAG;AAAEwD,YAAAA,SAAF;AAAa,eAAGzB,KAAhB;AAAuBD,YAAAA,EAAE,EAAEI,GAAG,CAACJ,EAA/B;AAAmClB,YAAAA,SAAS,EAAEuC;AAA9C,WAAX;AACAhC,UAAAA,QAAQ,CAACpB,OAAO,CAACC,IAAD,CAAR,CAAR;AACAsC,UAAAA,MAAM,CAACC,KAAP,CAAa,YAAb;AACAlB,UAAAA,OAAO,CAACmB,OAAR,CAAgB,GAAhB,EAJa,CAMb;;AACArB,UAAAA,QAAQ,CAAC9B,YAAY,CAACgD,UAAb,CAAwB,IAAxB,CAAD,CAAR;AACD,SAVH,EAWGe,KAXH,CAWUC,GAAD,IAAS;AACdf,UAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb;AACAjB,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B8B,GAA/B;AACD,SAdH;AAeD,OAvBH,EAwBGD,KAxBH,CAwBUC,GAAD,IAAS;AACdf,QAAAA,MAAM,CAACC,KAAP,CAAa,sBAAb;AACAjB,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC8B,GAApC;AACD,OA3BH;AA4BD,KA7BD;AA8BD,GAjED;AAkED,CAnED,C,CAqEA;;;AACA,MAAMO,SAAS,GAAG,CAACpD,KAAK,GAAG,IAAT,EAAeE,IAAI,GAAG,CAAtB,KAA4B;AAC5C,SAAO,UAAUS,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChD;AACA,QAAIwC,OAAO,GAAGzC,QAAQ,GAAGpB,IAAX,CAAgBF,MAA9B,CAFgD,CAIhD;;AACA,QAAI+D,OAAO,CAACrD,KAAR,IAAiB,CAACqD,OAAO,CAACpD,IAA9B,EAAoC;AAClC;AACD,KAP+C,CAShD;AACA;;;AACAU,IAAAA,QAAQ,CAACf,OAAO,CAAC,IAAD,CAAR,CAAR,CAXgD,CAahD;;AACA,UAAM4B,MAAM,GAAG/C,SAAS,CAACgD,UAAV,CAAqB,MAArB,CAAf,CAdgD,CAgBhD;AACA;AACA;;AACA,QAAI6B,KAAK,GAAG9B,MAAM,CAAC+B,OAAP,CAAe,WAAf,EAA4B,MAA5B,CAAZ,CAnBgD,CAqBhD;;AACA,QAAIvD,KAAJ,EAAW;AACT;AACAsD,MAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAcxD,KAAd,CAAR;AACD,KAzB+C,CA2BhD;AACA;;;AACAsD,IAAAA,KAAK,CACFG,KADH,CACSvD,IAAI,GAAG,CADhB,EAEGwD,GAFH,GAGG9B,IAHH,CAGS+B,IAAD,IAAU;AACd,UAAItE,SAAS,GAAG,EAAhB,CADc,CAGd;AACA;AACA;AACA;;AACA,UAAIC,MAAM,GAAG;AACXU,QAAAA,KAAK,EAAE2D,IAAI,CAACA,IAAL,CAAU,CAAV,CADI;AAEX1D,QAAAA,IAAI,EACF0D,IAAI,CAACA,IAAL,CAAUC,MAAV,KAAqB1D,IAAI,GAAG,CAA5B,GACIyD,IAAI,CAACA,IAAL,CAAUA,IAAI,CAACA,IAAL,CAAUC,MAAV,GAAmB,CAA7B,CADJ,GAEI,IALK;AAMX1D,QAAAA,IAAI,EAAEA;AANK,OAAb,CAPc,CAgBd;;AACAyD,MAAAA,IAAI,CAACE,OAAL,CAAcnC,GAAD,IAAS;AACpB,YAAIH,KAAK,GAAGG,GAAG,CAACoC,IAAJ,EAAZ,CADoB,CAGpB;AACA;AACA;AACA;;;AACA,YAAItE,IAAI,GAAGuE,MAAM,CAACC,IAAP,CAAYzC,KAAZ,EAAmB0C,MAAnB,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZ;AACA;AACA,cAAIA,GAAG,CAACC,OAAJ,CAAY,OAAZ,MAAyB,CAAC,CAA9B,EAAiC;AAC/B;AACA,mBAAO,EACL,GAAGF,GADE;AAELlB,cAAAA,SAAS,EAAE,EAAE,GAAGkB,GAAG,CAAClB,SAAT;AAAoB,iBAACmB,GAAD,GAAO5C,KAAK,CAAC4C,GAAD;AAAhC;AAFN,aAAP;AAID,WATW,CAWZ;;;AACA,iBAAO,EAAE,GAAGD,GAAL;AAAU,aAACC,GAAD,GAAO5C,KAAK,CAAC4C,GAAD;AAAtB,WAAP;AACD,SAdQ,EAeT;AAAE7C,UAAAA,EAAE,EAAEI,GAAG,CAACJ,EAAV;AAAc0B,UAAAA,SAAS,EAAE;AAAzB,SAfS,CAAX,CAPoB,CAyBpB;;AACA3D,QAAAA,SAAS,CAACgF,IAAV,CAAe7E,IAAf;AACD,OA3BD,EAjBc,CA8Cd;;AACA,UAAIF,MAAM,CAACW,IAAX,EAAiB;AACfZ,QAAAA,SAAS,CAACiF,GAAV;AACD,OAjDa,CAmDd;AACA;AAEA;;;AACA3D,MAAAA,QAAQ,CAACvB,OAAO,CAACC,SAAD,EAAYC,MAAZ,CAAR,CAAR;AACD,KA3DH;AA4DD,GAzFD;AA0FD,CA3FD,C,CA6FA;AACA;;;AACA,MAAMiF,YAAY,GAAIjD,EAAD,IAAQ;AAC3B,SAAO,UAAUX,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChD,UAAMW,MAAM,GAAG/C,SAAS,CAACgD,UAAV,CAAqB,MAArB,CAAf;AACAD,IAAAA,MAAM,CACHE,GADH,CACOJ,EADP,EAEGoC,GAFH,GAGG9B,IAHH,CAGSF,GAAD,IAAS;AACb,UAAIH,KAAK,GAAGG,GAAG,CAACoC,IAAJ,EAAZ;;AACA,UAAItE,IAAI,GAAGuE,MAAM,CAACC,IAAP,CAAYzC,KAAZ,EAAmB0C,MAAnB,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZ,YAAIA,GAAG,CAACC,OAAJ,CAAY,OAAZ,MAAyB,CAAC,CAA9B,EAAiC;AAC/B,iBAAO,EACL,GAAGF,GADE;AAELlB,YAAAA,SAAS,EAAE,EAAE,GAAGkB,GAAG,CAAClB,SAAT;AAAoB,eAACmB,GAAD,GAAO5C,KAAK,CAAC4C,GAAD;AAAhC;AAFN,WAAP;AAID;;AACD,eAAO,EAAE,GAAGD,GAAL;AAAU,WAACC,GAAD,GAAO5C,KAAK,CAAC4C,GAAD;AAAtB,SAAP;AACD,OATQ,EAUT;AAAE7C,QAAAA,EAAE,EAAEI,GAAG,CAACJ,EAAV;AAAc0B,QAAAA,SAAS,EAAE;AAAzB,OAVS,CAAX,CAFa,CAeb;;AACArC,MAAAA,QAAQ,CAACvB,OAAO,CAAC,CAACI,IAAD,CAAD,CAAR,CAAR;AACD,KApBH;AAqBD,GAvBD;AAwBD,CAzBD,C,CA2BA;;;AACA,MAAMgF,YAAY,GAAIlD,EAAD,IAAQ;AAC3B,SAAO,UAAUX,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChD;AACA,QAAI,CAACS,EAAL,EAAS;AACPQ,MAAAA,MAAM,CAACC,KAAP,CAAa,kBAAb;AACA;AACD;;AAED,UAAMP,MAAM,GAAG/C,SAAS,CAACgD,UAAV,CAAqB,MAArB,CAAf,CAPgD,CAShD;;AACAD,IAAAA,MAAM,CACHE,GADH,CACOJ,EADP,EAEGmD,MAFH,GAGG7C,IAHH,CAGS8C,GAAD,IAAS;AACb/D,MAAAA,QAAQ,CAAChB,UAAU,CAAC2B,EAAD,CAAX,CAAR;AACAT,MAAAA,OAAO,CAACmB,OAAR,CAAgB,GAAhB;AACD,KANH,EAOGY,KAPH,CAOUC,GAAD,IAAS;AACd/B,MAAAA,OAAO,CAACC,GAAR,CAAY8B,GAAZ;AACD,KATH;AAUD,GApBD;AAqBD,CAtBD,C,CAwBA;;;AACA,eAAetE,aAAa,CAC1B;AACE,GAACO,QAAD,GAAY,CAAC6F,KAAD,EAAQC,MAAR,KACVpG,OAAO,CAACmG,KAAD,EAASE,KAAD,IAAW;AACxB;AACAA,IAAAA,KAAK,CAAC9E,IAAN,CAAWsE,IAAX,CAAgB,GAAGO,MAAM,CAACE,OAAP,CAAezF,SAAlC;AAEAwF,IAAAA,KAAK,CAAC9E,IAAN,GAAa8E,KAAK,CAAC9E,IAAN,CAAWkE,MAAX,CAAkB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3C,UAAID,GAAG,CAAC9C,SAAJ,CAAe2D,CAAD,IAAOA,CAAC,CAACzD,EAAF,KAAS6C,GAAG,CAAC7C,EAAlC,MAA0C,CAAC,CAA/C,EAAkD;AAChD,eAAO,CAAC,GAAG4C,GAAJ,EAASC,GAAT,CAAP;AACD,OAFD,MAEO;AACLD,QAAAA,GAAG,CAACA,GAAG,CAAC9C,SAAJ,CAAe2D,CAAD,IAAOA,CAAC,CAACzD,EAAF,KAAS6C,GAAG,CAAC7C,EAAlC,CAAD,CAAH,GAA6C6C,GAA7C;AACA,eAAOD,GAAP;AACD;AACF,KAPY,EAOV,EAPU,CAAb,CAJwB,CAaxB;;AACA,QAAIU,MAAM,CAACE,OAAP,CAAexF,MAAnB,EAA2B;AACzBuF,MAAAA,KAAK,CAACvF,MAAN,GAAesF,MAAM,CAACE,OAAP,CAAexF,MAA9B;AACD,KAhBuB,CAkBxB;AACA;AACA;;;AACAuF,IAAAA,KAAK,CAAChF,UAAN,GAAmB,KAAnB;AACD,GAtBM,CAFX;AA0BE,GAACd,QAAD,GAAY,CAAC4F,KAAD,EAAQC,MAAR,KACVpG,OAAO,CAACmG,KAAD,EAASE,KAAD,IAAW;AACxB;AACAA,IAAAA,KAAK,CAAC9E,IAAN,CAAWiF,OAAX,CAAmBJ,MAAM,CAACE,OAAP,CAAetF,IAAlC;AACD,GAHM,CA3BX;AA+BE,GAACR,SAAD,GAAa,CAAC2F,KAAD,EAAQC,MAAR,KACXpG,OAAO,CAACmG,KAAD,EAASE,KAAD,IAAW;AACxB;AACA,QAAII,GAAG,GAAGJ,KAAK,CAAC9E,IAAN,CAAWqB,SAAX,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASsD,MAAM,CAACE,OAAP,CAAepF,OAApD,CAAV,CAFwB,CAIxB;;AACAmF,IAAAA,KAAK,CAAC9E,IAAN,CAAWkF,GAAX,IAAkB,EAAE,GAAGJ,KAAK,CAAC9E,IAAN,CAAWkF,GAAX,CAAL;AAAsB,SAAGL,MAAM,CAACE,OAAP,CAAetF;AAAxC,KAAlB;AACD,GANM,CAhCX;AAuCE,GAACP,WAAD,GAAe,CAAC0F,KAAD,EAAQC,MAAR,KACbpG,OAAO,CAACmG,KAAD,EAASE,KAAD,IAAW;AACxB,QAAII,GAAG,GAAGJ,KAAK,CAAC9E,IAAN,CAAWqB,SAAX,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASsD,MAAM,CAACE,OAAP,CAAepF,OAApD,CAAV;;AAEA,QAAIuF,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd;AACAJ,MAAAA,KAAK,CAAC9E,IAAN,CAAWmF,MAAX,CAAkBD,GAAlB,EAAuB,CAAvB;AACD;AACF,GAPM,CAxCX;AAgDE,GAAC/F,OAAD,GAAW,CAACyF,KAAD,EAAQC,MAAR,KACTpG,OAAO,CAACmG,KAAD,EAASE,KAAD,IAAW;AACxB;AACAA,IAAAA,KAAK,CAAChF,UAAN,GAAmB+E,MAAM,CAACE,OAAP,CAAejF,UAAlC;AACD,GAHM;AAjDX,CAD0B,EAuD1BC,YAvD0B,CAA5B;AA0DA,MAAMlB,cAAc,GAAG;AACrBQ,EAAAA,OADqB;AAErBG,EAAAA,OAFqB;AAGrBE,EAAAA,QAHqB;AAIrB2D,EAAAA,SAJqB;AAKrBN,EAAAA,SALqB;AAMrBpC,EAAAA,UANqB;AAOrB6D,EAAAA,YAPqB;AAQrBC,EAAAA;AARqB,CAAvB;AAWA,SAAS5F,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport moment from \"moment\";\n\nimport { actionCreators as imageActions } from \"./image\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DELETE_POST = \"DELETE_POST\";\nconst LOADING = \"LOADING\";\nconst SET_LIKE = \"SET_LIKE\";\n\nconst setPost = createAction(SET_POST, (post_list, paging) => ({\n  post_list,\n  paging,\n}));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post,\n}));\nconst deletePost = createAction(DELETE_POST, (post_id) => ({ post_id }));\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: [],\n  paging: { start: null, next: null, size: 3 },\n  is_loading: false,\n};\n\n// 포스트에 들어가야만 하는 기본 정보를 미리 하나 만들어요! (매번 적기는 귀찮으니까..!)\n// layout_type : a, b, c\n//  - a : 텍스트가 위, 이미지가 아래인 레이아웃\n//  - b : 텍스트가 좌측, 이미지가 우측인 레이아웃\n//  - c : 텍스트가 우측, 이미지가 좌측인 레이아웃\n// image_url : 이미지 주소\n// like_cnt : 좋아요 갯수\n// insert_dt : 작성일시\nconst initialPost = {\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"\",\n  like_cnt: 0,\n  layout_type: \"a\",\n  insert_dt: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n};\n\n// 게시글 수정하기\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, { history }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    }\n\n    // 프리뷰 이미지를 가져옵니다.\n    const _image = getState().image.preview;\n\n    // 수정하려는 게시글이 게시글 목록에서 몇 번째에 있나 확인합니다.\n    const _post_idx = getState().post.list.findIndex((p) => p.id === post_id);\n    // 수정하려는 게시글 정보를 가져옵니다. (수정 전 정보겠죠!)\n    const _post = getState().post.list[_post_idx];\n    // 아래의 주석을 풀고 확인해보세요!\n    // console.log(_post);\n\n    // 파이어스토어에서 콜렉션 선택하기\n    const postDB = firestore.collection(\"post\");\n\n    // 현재 프리뷰의 이미지와 게시글 정보에 있는 이미지가 같은 지 확인합니다.\n    // 같다면 이미지 업로드는 할 필요 없겠죠!\n    if (_image === _post.image_url) {\n      // 게시글 정보를 수정해요!\n      postDB\n        .doc(post_id)\n        .update(post)\n        .then((doc) => {\n          dispatch(editPost(post_id, { ...post }));\n          //   프리뷰는 이제 null로 바꿔줍니다!\n          dispatch(imageActions.setPreview(null));\n          window.alert(\"게시글 수정F 완료!\")\n          history.replace(\"/\");\n        });\n      return;\n    } else {\n      // 유저 정보를 가져와요 (유저 id!)\n      const user_id = getState().user.user.uid;\n      // 이미지를 data_url 방식으로 업로드하도록 준비!\n      const _upload = storage\n        .ref(`images/${user_id}_${new Date().getTime()}`)\n        .putString(_image, \"data_url\");\n\n      // 이미지를 업로드하고,\n      _upload.then((snapshot) => {\n        //   업로드한 뒤 링크를 가져옵니다. (업로드한 이미지의 경로를 가져와요.)\n        snapshot.ref\n          .getDownloadURL()\n          .then((url) => {\n            //   아래 주석을 풀고 경로를 확인해보세요 :)\n            // console.log(url);\n\n            return url;\n          })\n          .then((url) => {\n            // 경로를 가지고 게시글 정보를 수정해줍니다.\n            postDB\n              .doc(post_id)\n              .update({ ...post, image_url: url })\n              .then((doc) => {\n                //   리덕스에도 수정한 정보를 넣어줘요.\n                dispatch(editPost(post_id, { ...post, image_url: url }));\n                //   프리뷰는 이제 null로 바꿔줍니다!\n                dispatch(imageActions.setPreview(null));\n                // 수정이 끝났으니, / 경로로 돌아갑니다.\n                history.replace(\"/\");\n              });\n          })\n          .catch((err) => {\n            window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n            console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n          });\n      });\n    }\n  };\n};\n\n// 게시글 추가하기\nconst addPostFB = (contents = \"\", layout_type = \"a\") => {\n  return function (dispatch, getState, { history }) {\n    //  파이어스토어에서 콜렉션부터 잡아줍니다.\n    const postDB = firestore.collection(\"post\");\n\n    // 게시글 작성자 (로그인한 유저겠죠!) 정보를 가져와요.\n    const _user = getState().user.user;\n\n    // 유저 정보를 꾸려주고,\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile,\n    };\n\n    // 게시글 정보도 꾸려줘요.\n    const _post = {\n      ...initialPost,\n      contents: contents,\n      layout_type: layout_type,\n      insert_dt: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n    };\n\n    // 이미지도 가져옵니다.\n    const _image = getState().image.preview;\n\n    // 만약 이미지가 없으면? 경고를 띄워주고 업로드하지 않아요!\n    if (!_image) {\n      window.alert(\"이미지가 필요해요!\");\n      return;\n    }\n    // 이미지 업로드 먼저! (이미지 업로드가 실패하면 게시글도 업로드 하지 않게!)\n    const _upload = storage\n      .ref(`images/${user_info.user_id}_${new Date().getTime()}`)\n      .putString(_image, \"data_url\");\n\n    _upload.then((snapshot) => {\n      snapshot.ref\n        .getDownloadURL()\n        .then((url) => {\n          return url;\n        })\n        .then((url) => {\n          // 이미지 업로드가 무사히 잘 끝났다면, 이제 게시글 정보를 파이어스토어에 넣어줍니다.\n          // 주의! 파이어스토어에는 리덕스에서 관리하는 것과 조금 다르게 게시글 1개 정보를 관리할거예요.\n          postDB\n            .add({ ...user_info, ..._post, image_url: url })\n            .then((doc) => {\n              let post = { user_info, ..._post, id: doc.id, image_url: url };\n              dispatch(addPost(post));\n              window.alert(\"게시글 작성 완료!\")\n              history.replace(\"/\");\n\n              //   프리뷰는 이제 null로 바꿔줍니다!\n              dispatch(imageActions.setPreview(null));\n            })\n            .catch((err) => {\n              window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n              console.log(\"post 작성에 실패했어요!\", err);\n            });\n        })\n        .catch((err) => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n    });\n  };\n};\n\n// 게시글 가져오기\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, { history }) {\n    //   가장 먼저 페이징 정보를 가져와요.\n    let _paging = getState().post.paging;\n\n    // 시작점이 있고, 다음 게시글이 없다면? 더 가져올 게 없다는 뜻이니 return!\n    if (_paging.start && !_paging.next) {\n      return;\n    }\n\n    // 가져오기 중일 때는 loading을 true로 바꿔줍니다.\n    // 연속해서 계속 불러오는 걸 방지하기 위함입니다.\n    dispatch(loading(true));\n\n    // 파이어스토어에서 post 콜렉션을 먼저 잡아주고,\n    const postDB = firestore.collection(\"post\");\n\n    // 쿼리를 작성해요!\n    // 작성일 기준으로 역순 정렬할거예요.\n    // +) asc, desc를 왔다갔다 하면서 정렬을 바꿔보세요!\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n    // 만약 시작점이 있다면? (start는 매개변수로 가져오는 걸 잊으면 안됩니다! -> getPostFB를 부를 때는? paging의 next 값을 start로 넘겨주겠죠!)\n    if (start) {\n      // 쿼리에 몇번째 게시글부터 가져올 지, 시작점 정보를 추가해줍니다.\n      query = query.startAt(start);\n    }\n\n    // 우리가 미리 지정한 사이즈(갯수)보다 1개 더 많이 가져올거예요.\n    // 그래야 next에 무언가를 넣어서 다음에 또 불러올 게 있나 없나 판단할 수 있어요.\n    query\n      .limit(size + 1)\n      .get()\n      .then((docs) => {\n        let post_list = [];\n\n        // 페이징 정보를 만들어줘요.\n        // start는 지금 가져온 데이터의 첫번째 걸로,\n        // next는 가져온 데이터의 길이를 보고 지정 사이즈보다 +1개면 마지막 데이터를,\n        // 지금 사이즈와 같거나 작으면 null을 넣어줘요.\n        let paging = {\n          start: docs.docs[0],\n          next:\n            docs.docs.length === size + 1\n              ? docs.docs[docs.docs.length - 1]\n              : null,\n          size: size,\n        };\n\n        // 이제 파이어스토어에서 가져온 데이터를 리덕스에 넣기 좋게 만들어요!\n        docs.forEach((doc) => {\n          let _post = doc.data();\n\n          // reduce로 데이터를 정제해요!\n          // reduce 사용법이 익숙하지 않으시다면 reduce 사용법 검색해보기!\n          //  게시글 하나는 딕셔너리 형태예요.\n          // 이 딕셔너리 형태 데이터의 키만 가지고 배열을 만들어 reduce를 돌립니다.\n          let post = Object.keys(_post).reduce(\n            (acc, cur) => {\n              // acc는 누적 값, cur은 현재 값이에요.\n              // 현재 값(key 값 중 하나겠죠!)에 user_가 들어있다면?\n              if (cur.indexOf(\"user_\") !== -1) {\n                //   user_info에 현재 키값과 현재 키를 사용해 가져온 밸류를 누적 딕셔너리에 추가해줍니다.\n                return {\n                  ...acc,\n                  user_info: { ...acc.user_info, [cur]: _post[cur] },\n                };\n              }\n\n              //   user_가 없다면? 누적 딕셔너리에 바로 넣어주기!\n              return { ...acc, [cur]: _post[cur] };\n            },\n            { id: doc.id, user_info: {} }\n          );\n\n          //   정제한 데이터를 post_list에 넣어줘요.\n          post_list.push(post);\n        });\n\n        // 마지막 1개는 빼줘요! (다음 번 리스트에 있어야할 값이니까요!)\n        if (paging.next) {\n          post_list.pop();\n        }\n\n        // post_list를 확인해봅시다!\n        // console.log(post_list);\n\n        // 이제 게시글 목록을 리덕스에 넣어줍시다!\n        dispatch(setPost(post_list, paging));\n      });\n  };\n};\n\n// 게시글 하나만 가져오기\n// 상세페이지 등에 바로 접근할 때를 대비해서 게시글 하나만 가져오는 함수도 만들어요.\nconst getOnePostFB = (id) => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n    postDB\n      .doc(id)\n      .get()\n      .then((doc) => {\n        let _post = doc.data();\n        let post = Object.keys(_post).reduce(\n          (acc, cur) => {\n            if (cur.indexOf(\"user_\") !== -1) {\n              return {\n                ...acc,\n                user_info: { ...acc.user_info, [cur]: _post[cur] },\n              };\n            }\n            return { ...acc, [cur]: _post[cur] };\n          },\n          { id: doc.id, user_info: {} }\n        );\n\n        // 하나를 가져오지만, 게시글 목록은 배열이잖아요! 배열 형태에 맞게 []로 싸줍니다.\n        dispatch(setPost([post]));\n      });\n  };\n};\n\n// 게시글 삭제하기\nconst deletePostFB = (id) => {\n  return function (dispatch, getState, { history }) {\n    // id가 없으면 return!\n    if (!id) {\n      window.alert(\"삭제할 수 없는 게시글이에요!\");\n      return;\n    }\n\n    const postDB = firestore.collection(\"post\");\n\n    // 게시글 id로 선택해서 삭제하기!\n    postDB\n      .doc(id)\n      .delete()\n      .then((res) => {\n        dispatch(deletePost(id));\n        history.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 리듀서\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        //   데이터를 기존 데이터에 추가해요.\n        draft.list.push(...action.payload.post_list);\n\n        draft.list = draft.list.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.id === cur.id) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.id === cur.id)] = cur;\n            return acc;\n          }\n        }, []);\n\n        // 페이징도 넣어줍니다.\n        if (action.payload.paging) {\n          draft.paging = action.payload.paging;\n        }\n\n        // 리듀서에 기록할 때는 이미 로딩이 끝났겠죠! 여기에서 false로 바꿔줘요.\n        // 액션을 따로 호출해도 좋지만, 무조건 is_loading이 false 되는 지점에서는 굳이 액션을 두번 일으키기 보단\n        // 이런 식으로 바로 바꿔주는 게 좋아요.\n        draft.is_loading = false;\n      }),\n\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        // 데이터를 배열 맨 앞에 넣어줍니다.\n        draft.list.unshift(action.payload.post);\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        // 배열의 몇 번째에 있는 지 찾습니다.\n        let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n\n        // 해당 위치에 넣어줍니다.\n        draft.list[idx] = { ...draft.list[idx], ...action.payload.post };\n      }),\n    [DELETE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n\n        if (idx !== -1) {\n          // 배열에서 idx 위치의 요소 1개를 지웁니다.\n          draft.list.splice(idx, 1);\n        }\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        //   데이터를 가져오는 중인 지 여부를 작성합니다.\n        draft.is_loading = action.payload.is_loading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n  getOnePostFB,\n  deletePostFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}