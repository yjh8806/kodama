{"ast":null,"code":"import _objectSpread from\"/Users/frankie/sparta/hanghae_react/magazine_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";// PostList.js\nimport React from\"react\";import{useSelector,useDispatch}from\"react-redux\";import Post from\"../components/Post\";import{actionCreators as postActions}from\"../redux/modules/post\";import InfinityScroll from\"../shared/InfinityScroll\";import{Grid}from\"../elements\";// 게시글 목록\n// 무한 스크롤을 사용해서 게시글 목록을 나눠가져와요! :) \nimport{jsx as _jsx}from\"react/jsx-runtime\";var PostList=function PostList(props){var dispatch=useDispatch();var post_list=useSelector(function(state){return state.post.list;});var user_info=useSelector(function(state){return state.user.user;});var is_loading=useSelector(function(state){return state.post.is_loading;});var paging=useSelector(function(state){return state.post.paging;});var history=props.history;React.useEffect(function(){//  게시글이 2개 미만일 때는 getPostFB를 호출해서 목록을 불러옵니다.\nif(post_list.length<2){dispatch(postActions.getPostFB());console.log(user_info);}},[]);return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Grid,{padding:\"0px\",maxwidth:\"33.750em\",margin:\"0px auto\",bg:\"white\",children:/*#__PURE__*/_jsx(InfinityScroll,{callNext:function callNext(){dispatch(postActions.getPostFB(paging.next));},is_next:paging.next?true:false,loading:is_loading,children:post_list.map(function(p,idx){if(p.user_info.user_id===(user_info===null||user_info===void 0?void 0:user_info.uid)){return/*#__PURE__*/_jsx(Grid,{bg:\"#ffffff\",margin:\"8px 0px\",children:/*#__PURE__*/_jsx(Post,_objectSpread(_objectSpread({},p),{},{is_me:true}),p.id)},p.id);}else{return/*#__PURE__*/_jsx(Grid,{bg:\"#ffffff\"// _onClick={() => {\n//   history.push(`/post/${p.id}`);\n// }}\n,children:/*#__PURE__*/_jsx(Post,_objectSpread({},p))},p.id);}})})})});};export default PostList;","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/pages/PostList.js"],"names":["React","useSelector","useDispatch","Post","actionCreators","postActions","InfinityScroll","Grid","PostList","props","dispatch","post_list","state","post","list","user_info","user","is_loading","paging","history","useEffect","length","getPostFB","console","log","next","map","p","idx","user_id","uid","id"],"mappings":"uKAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CACA,OAASC,cAAc,GAAIC,CAAAA,WAA3B,KAA8C,uBAA9C,CACA,MAAOC,CAAAA,cAAP,KAA2B,0BAA3B,CACA,OAASC,IAAT,KAAqB,aAArB,CAEA;AACA;2CACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAW,CAC1B,GAAMC,CAAAA,QAAQ,CAAGR,WAAW,EAA5B,CACA,GAAMS,CAAAA,SAAS,CAAGV,WAAW,CAAC,SAACW,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAN,CAAWC,IAAtB,EAAD,CAA7B,CACA,GAAMC,CAAAA,SAAS,CAAGd,WAAW,CAAC,SAACW,KAAD,QAAWA,CAAAA,KAAK,CAACI,IAAN,CAAWA,IAAtB,EAAD,CAA7B,CACA,GAAMC,CAAAA,UAAU,CAAGhB,WAAW,CAAC,SAACW,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAN,CAAWI,UAAtB,EAAD,CAA9B,CACA,GAAMC,CAAAA,MAAM,CAAGjB,WAAW,CAAC,SAACW,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAN,CAAWK,MAAtB,EAAD,CAA1B,CAL0B,GAOlBC,CAAAA,OAPkB,CAONV,KAPM,CAOlBU,OAPkB,CAS1BnB,KAAK,CAACoB,SAAN,CAAgB,UAAM,CACpB;AACA,GAAIT,SAAS,CAACU,MAAV,CAAmB,CAAvB,CAA0B,CACxBX,QAAQ,CAACL,WAAW,CAACiB,SAAZ,EAAD,CAAR,CACAC,OAAO,CAACC,GAAR,CAAYT,SAAZ,EACD,CACF,CAND,CAMG,EANH,EAQA,mBACE,KAAC,KAAD,CAAO,QAAP,wBACE,KAAC,IAAD,EAAM,OAAO,CAAC,KAAd,CAAoB,QAAQ,CAAC,UAA7B,CAAwC,MAAM,CAAC,UAA/C,CAA0D,EAAE,CAAC,OAA7D,uBAEE,KAAC,cAAD,EACE,QAAQ,CAAE,mBAAM,CACdL,QAAQ,CAACL,WAAW,CAACiB,SAAZ,CAAsBJ,MAAM,CAACO,IAA7B,CAAD,CAAR,CACD,CAHH,CAIE,OAAO,CAAEP,MAAM,CAACO,IAAP,CAAc,IAAd,CAAqB,KAJhC,CAKE,OAAO,CAAER,UALX,UAOGN,SAAS,CAACe,GAAV,CAAc,SAACC,CAAD,CAAIC,GAAJ,CAAY,CACzB,GAAID,CAAC,CAACZ,SAAF,CAAYc,OAAZ,IAAwBd,SAAxB,SAAwBA,SAAxB,iBAAwBA,SAAS,CAAEe,GAAnC,CAAJ,CAA4C,CAC1C,mBACE,KAAC,IAAD,EACE,EAAE,CAAC,SADL,CAEE,MAAM,CAAC,SAFT,uBASE,KAAC,IAAD,gCAAqBH,CAArB,MAAwB,KAAK,KAA7B,GAAWA,CAAC,CAACI,EAAb,CATF,EAGOJ,CAAC,CAACI,EAHT,CADF,CAaD,CAdD,IAcO,CACL,mBACE,KAAC,IAAD,EAEE,EAAE,CAAC,SACH;AACA;AACA;AALF,uBAOE,KAAC,IAAD,kBAAUJ,CAAV,EAPF,EACOA,CAAC,CAACI,EADT,CADF,CAWD,CACF,CA5BA,CAPH,EAFF,EADF,EADF,CA4CD,CA7DD,CA+DA,cAAevB,CAAAA,QAAf","sourcesContent":["// PostList.js\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Post from \"../components/Post\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport InfinityScroll from \"../shared/InfinityScroll\";\nimport { Grid } from \"../elements\";\n\n// 게시글 목록\n// 무한 스크롤을 사용해서 게시글 목록을 나눠가져와요! :) \nconst PostList = (props) => {\n  const dispatch = useDispatch();\n  const post_list = useSelector((state) => state.post.list);\n  const user_info = useSelector((state) => state.user.user);\n  const is_loading = useSelector((state) => state.post.is_loading);\n  const paging = useSelector((state) => state.post.paging);\n\n  const { history } = props;\n\n  React.useEffect(() => {\n    //  게시글이 2개 미만일 때는 getPostFB를 호출해서 목록을 불러옵니다.\n    if (post_list.length < 2) {\n      dispatch(postActions.getPostFB());\n      console.log(user_info);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Grid padding=\"0px\" maxwidth=\"33.750em\" margin=\"0px auto\" bg=\"white\">\n        {/* <Post/> */}\n        <InfinityScroll\n          callNext={() => {\n            dispatch(postActions.getPostFB(paging.next));\n          }}\n          is_next={paging.next ? true : false}\n          loading={is_loading}\n        >\n          {post_list.map((p, idx) => {\n            if (p.user_info.user_id === user_info?.uid) {\n              return (\n                <Grid\n                  bg=\"#ffffff\"\n                  margin=\"8px 0px\"\n                  key={p.id}\n                  // _onClick={() => {\n                  //   history.push(`/post/${p.id}`);\n                  // }}\n                >\n                    {/* 유저정보가 로그인한 사용자 정보와 같으면 is_me 속성을 전달해요. */}\n                  <Post key={p.id} {...p} is_me />\n                </Grid>\n              );\n            } else {\n              return (\n                <Grid\n                  key={p.id}\n                  bg=\"#ffffff\"\n                  // _onClick={() => {\n                  //   history.push(`/post/${p.id}`);\n                  // }}\n                >\n                  <Post {...p} />\n                </Grid>\n              );\n            }\n          })}\n        </InfinityScroll>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default PostList;\n"]},"metadata":{},"sourceType":"module"}