{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport firebase from \"firebase\";\nimport { actionCreators as postActions } from \"./post\";\nconst SET_LIKE = \"SET_LIKE\";\nconst ADD_LIKE = \"ADD_LIKE\";\nconst LOADING = \"LOADING\";\nconst setlike = createAction(SET_LIKE, (post_id, is_liked) => ({\n  post_id,\n  is_liked\n}));\nconst addlike = createAction(ADD_LIKE, (post_id, user_id) => ({\n  post_id,\n  user_id\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {}\n};\n\nconst getLikeFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {};\n};\n\nconst addLikeFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const likeDB = firestore.collection(\"like\");\n    const user_info = getState().user.user;\n    let like = {\n      post_id: post_id,\n      user_id: user_info.uid\n    };\n    likeDB.add(like).then(doc => {\n      const postDB = firestore.collection(\"post\");\n      const post = getState().post.list.find(l => l.id === post_id);\n      const increment = firebase.firestore.FieldValue.increment(1);\n      like = { ...like,\n        id: doc.id\n      };\n      postDB.doc(post_id).update({\n        like_cnt: increment\n      }).then(_post => {\n        dispatch(addlike(post_id, user_info.uid));\n\n        if (post) {\n          dispatch(postActions.updatePost(post_id, {\n            like_cnt: parseInt(post.like_cnt) + 1\n          }));\n        }\n      });\n    });\n  };\n};\n\nconst cancelLikeFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const likeDB = firestore.collection(\"like\");\n    const user_info = getState().user.user;\n    likeDB.where(\"post_id\", \"==\", post_id).where(\"user_id\", \"==\", user_info.uid).get().then(docs => {\n      let id = \"\";\n      docs.forEach(doc => id = doc.id);\n      likeDB.doc(id).delete().then(() => {\n        const postDB = firestore.collection(\"post\");\n        const post = getState().post.list.find(l => l.id === post_id);\n        const decrement = firebase.firestore.FieldValue.increment(-1);\n        postDB.doc(post_id).update({\n          like_cnt: decrement\n        }).then(_post => {\n          dispatch(cancelLike(post_id, user_info.uid));\n\n          if (post) {\n            if (parseInt(post.like_cnt) === 0) {\n              return;\n            }\n\n            dispatch(postActions.updatePost(post_id, {\n              like_cnt: parseInt(post.like_cnt) - 1\n            }));\n          }\n        });\n      });\n    }).catch(error => {\n      console.log(\"좋아요를 취소할 포스트를 찾을수가 없어요ㅜㅜ\");\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_LIKE]: (state, action) => produce(state, draft => {\n    draft.list.is_liked = action.payload.is_liked;\n  }),\n  [ADD_LIKE]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id].push(action.payload.user_id);\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  setlike,\n  addlike,\n  addLikeFB,\n  getLikeFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/modules/like.js"],"names":["createAction","handleActions","produce","firestore","firebase","actionCreators","postActions","SET_LIKE","ADD_LIKE","LOADING","setlike","post_id","is_liked","addlike","user_id","loading","is_loading","initialState","list","getLikeFB","dispatch","getState","history","addLikeFB","likeDB","collection","user_info","user","like","uid","add","then","doc","postDB","post","find","l","id","increment","FieldValue","update","like_cnt","_post","updatePost","parseInt","cancelLikeFB","where","get","docs","forEach","delete","decrement","cancelLike","catch","error","console","log","state","action","draft","payload","push"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport firebase from \"firebase\";\nimport { actionCreators as postActions } from \"./post\";\n\nconst SET_LIKE = \"SET_LIKE\";\nconst ADD_LIKE = \"ADD_LIKE\";\nconst LOADING = \"LOADING\";\n\nconst setlike = createAction(SET_LIKE, (post_id, is_liked) => ({\n  post_id,\n  is_liked,\n}));\nconst addlike = createAction(ADD_LIKE, (post_id, user_id) => ({\n  post_id,\n  user_id,\n}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: {\n\n  },\n};\n\nconst getLikeFB = (post_id) => {\n  return function (dispatch, getState, { history }) {};\n};\n\nconst addLikeFB = (post_id) => {\n  return function (dispatch, getState, { history }) {\n    const likeDB = firestore.collection(\"like\");\n    const user_info = getState().user.user;\n\n    let like = {\n      post_id: post_id,\n      user_id: user_info.uid,\n    };\n\n    likeDB.add(like).then((doc) => {\n      const postDB = firestore.collection(\"post\");\n\n      const post = getState().post.list.find((l) => l.id === post_id);\n\n      const increment = firebase.firestore.FieldValue.increment(1);\n\n      like = { ...like, id: doc.id };\n\n      postDB\n        .doc(post_id)\n        .update({ like_cnt: increment })\n        .then((_post) => {\n          dispatch(addlike(post_id, user_info.uid));\n\n          if (post) {\n            dispatch(\n              postActions.updatePost(post_id, {\n                like_cnt: parseInt(post.like_cnt) + 1,\n              })\n            );\n          }\n        });\n    });\n  };\n};\n\nconst cancelLikeFB = (post_id) => {\n  return function (dispatch, getState, { history }) {\n    const likeDB = firestore.collection(\"like\");\n    const user_info = getState().user.user;\n\n    likeDB\n      .where(\"post_id\", \"==\", post_id)\n      .where(\"user_id\", \"==\", user_info.uid)\n      .get()\n      .then((docs) => {\n        let id = \"\";\n        docs.forEach((doc) => (id = doc.id));\n        likeDB\n          .doc(id)\n          .delete()\n          .then(() => {\n            const postDB = firestore.collection(\"post\");\n\n            const post = getState().post.list.find((l) => l.id === post_id);\n\n            const decrement = firebase.firestore.FieldValue.increment(-1);\n\n            postDB\n              .doc(post_id)\n              .update({ like_cnt: decrement })\n              .then((_post) => {\n                dispatch(cancelLike(post_id, user_info.uid));\n                if (post) {\n                  if (parseInt(post.like_cnt) === 0) {\n                    return;\n                  }\n                  dispatch(\n                    postActions.updatePost(post_id, {\n                      like_cnt: parseInt(post.like_cnt) - 1,\n                    })\n                  );\n                }\n              });\n          });\n      })\n      .catch((error) => {\n        console.log(\"좋아요를 취소할 포스트를 찾을수가 없어요ㅜㅜ\");\n      });\n  };\n};\nexport default handleActions(\n  {\n    [SET_LIKE]: (state, action) => produce(state, (draft) => {\n      draft.list.is_liked = action.payload.is_liked;\n    }),\n    [ADD_LIKE]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list[action.payload.post_id].push(action.payload.user_id);\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setlike,\n  addlike,\n  addLikeFB,\n  getLikeFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}