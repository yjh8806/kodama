{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter } from \"connected-react-router\"; // 리듀서를 가져올거예요.\n\nimport User from \"./modules/user\";\nimport Post from \"./modules/post\";\nimport Image from \"./modules/image\";\nimport Like from \"./modules/like\"; // 브라우저 히스토리를 만듭니다.\n\nexport const history = createBrowserHistory(); // 가져온 리듀서를 루트 리듀서로 묶어줍니다.\n\nconst rootReducer = combineReducers({\n  user: User,\n  post: Post,\n  image: Image,\n  like: Like,\n  router: connectRouter(history)\n}); // 사용할 미들웨어를 여기에 넣어줍니다.\n// thunk에는 history를 넣어줄거예요. (중간 다리 역할을 하는 미들웨어에서도 페이지 이동을 할 수 있게 하려고!)\n\nconst middlewares = [thunk.withExtraArgument({\n  history: history\n})]; // 지금이 어느 환경인 지 알려줘요. (개발환경, 프로덕션(배포)환경 ...)\n\nconst env = process.env.NODE_ENV; // 개발환경에서는 로거라는 걸 하나만 더 써볼게요.\n\nif (env === \"development\") {\n  const {\n    logger\n  } = require(\"redux-logger\");\n\n  middlewares.push(logger);\n} // redux devtools 익스텐션 사용 설정\n\n\nconst composeEnhancers = typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n}) : compose;\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares)); // 스토어 만들기\n\nlet store = initialStore => createStore(rootReducer, enhancer);\n\nexport default store();","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/configureStore.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","createBrowserHistory","connectRouter","User","Post","Image","Like","history","rootReducer","user","post","image","like","router","middlewares","withExtraArgument","env","process","NODE_ENV","logger","require","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancer","store","initialStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,aAAT,QAA8B,wBAA9B,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAQC,IAAR,MAAmB,gBAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAGN,oBAAoB,EAApC,C,CAEP;;AACA,MAAMO,WAAW,GAAGX,eAAe,CAAC;AAClCY,EAAAA,IAAI,EAAEN,IAD4B;AAElCO,EAAAA,IAAI,EAAEN,IAF4B;AAGlCO,EAAAA,KAAK,EAAEN,KAH2B;AAIlCO,EAAAA,IAAI,EAAEN,IAJ4B;AAKlCO,EAAAA,MAAM,EAAEX,aAAa,CAACK,OAAD;AALa,CAAD,CAAnC,C,CAQA;AACA;;AACA,MAAMO,WAAW,GAAG,CAACd,KAAK,CAACe,iBAAN,CAAwB;AAAER,EAAAA,OAAO,EAAEA;AAAX,CAAxB,CAAD,CAApB,C,CAEA;;AACA,MAAMS,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAxB,C,CAEA;;AACA,IAAIF,GAAG,KAAK,aAAZ,EAA2B;AACzB,QAAM;AAAEG,IAAAA;AAAF,MAAaC,OAAO,CAAC,cAAD,CAA1B;;AACAN,EAAAA,WAAW,CAACO,IAAZ,CAAiBF,MAAjB;AACD,C,CAED;;;AACA,MAAMG,gBAAgB,GACpB,OAAOC,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,oCAArC,GACID,MAAM,CAACC,oCAAP,CAA4C,CAC1C;AAD0C,CAA5C,CADJ,GAIIzB,OALN;AAOA,MAAM0B,QAAQ,GAAGH,gBAAgB,CAACxB,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CAAjC,C,CAEA;;AACA,IAAIY,KAAK,GAAIC,YAAD,IAAkB/B,WAAW,CAACY,WAAD,EAAciB,QAAd,CAAzC;;AAEA,eAAeC,KAAK,EAApB","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter } from \"connected-react-router\";\n\n// 리듀서를 가져올거예요.\nimport User from \"./modules/user\";\nimport  Post  from \"./modules/post\";\nimport Image from \"./modules/image\";\nimport Like from \"./modules/like\";\n\n// 브라우저 히스토리를 만듭니다.\nexport const history = createBrowserHistory();\n\n// 가져온 리듀서를 루트 리듀서로 묶어줍니다.\nconst rootReducer = combineReducers({\n  user: User,\n  post: Post,\n  image: Image,\n  like: Like,\n  router: connectRouter(history),\n});\n\n// 사용할 미들웨어를 여기에 넣어줍니다.\n// thunk에는 history를 넣어줄거예요. (중간 다리 역할을 하는 미들웨어에서도 페이지 이동을 할 수 있게 하려고!)\nconst middlewares = [thunk.withExtraArgument({ history: history })];\n\n// 지금이 어느 환경인 지 알려줘요. (개발환경, 프로덕션(배포)환경 ...)\nconst env = process.env.NODE_ENV;\n\n// 개발환경에서는 로거라는 걸 하나만 더 써볼게요.\nif (env === \"development\") {\n  const { logger } = require(\"redux-logger\");\n  middlewares.push(logger);\n}\n\n// redux devtools 익스텐션 사용 설정\nconst composeEnhancers =\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n// 스토어 만들기\nlet store = (initialStore) => createStore(rootReducer, enhancer);\n\nexport default store();\n"]},"metadata":{},"sourceType":"module"}