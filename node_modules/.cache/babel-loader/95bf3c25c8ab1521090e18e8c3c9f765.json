{"ast":null,"code":"import{createStore,combineReducers,applyMiddleware,compose}from\"redux\";import thunk from\"redux-thunk\";import{createBrowserHistory}from\"history\";import{connectRouter}from\"connected-react-router\";// 리듀서를 가져올거예요.\nimport User from\"./modules/user\";import Post from\"./modules/post\";import Image from\"./modules/image\";import Like from\"./modules/like\";// 브라우저 히스토리를 만듭니다.\nexport var history=createBrowserHistory();// 가져온 리듀서를 루트 리듀서로 묶어줍니다.\nvar rootReducer=combineReducers({user:User,post:Post,image:Image,like:Like,router:connectRouter(history)});// 사용할 미들웨어를 여기에 넣어줍니다.\n// thunk에는 history를 넣어줄거예요. (중간 다리 역할을 하는 미들웨어에서도 페이지 이동을 할 수 있게 하려고!)\nvar middlewares=[thunk.withExtraArgument({history:history})];// 지금이 어느 환경인 지 알려줘요. (개발환경, 프로덕션(배포)환경 ...)\nvar env=process.env.NODE_ENV;// 개발환경에서는 로거라는 걸 하나만 더 써볼게요.\nif(env===\"development\"){var _require=require(\"redux-logger\"),logger=_require.logger;middlewares.push(logger);}// redux devtools 익스텐션 사용 설정\nvar composeEnhancers=typeof window===\"object\"&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n}):compose;var enhancer=composeEnhancers(applyMiddleware.apply(void 0,middlewares));// 스토어 만들기\nvar store=function store(initialStore){return createStore(rootReducer,enhancer);};export default store();","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/configureStore.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","createBrowserHistory","connectRouter","User","Post","Image","Like","history","rootReducer","user","post","image","like","router","middlewares","withExtraArgument","env","process","NODE_ENV","require","logger","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancer","store","initialStore"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,eAAvC,CAAwDC,OAAxD,KAAuE,OAAvE,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,oBAAT,KAAqC,SAArC,CACA,OAASC,aAAT,KAA8B,wBAA9B,CAEA;AACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAQC,CAAAA,IAAR,KAAmB,gBAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CAEA;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAGN,oBAAoB,EAApC,CAEP;AACA,GAAMO,CAAAA,WAAW,CAAGX,eAAe,CAAC,CAClCY,IAAI,CAAEN,IAD4B,CAElCO,IAAI,CAAEN,IAF4B,CAGlCO,KAAK,CAAEN,KAH2B,CAIlCO,IAAI,CAAEN,IAJ4B,CAKlCO,MAAM,CAAEX,aAAa,CAACK,OAAD,CALa,CAAD,CAAnC,CAQA;AACA;AACA,GAAMO,CAAAA,WAAW,CAAG,CAACd,KAAK,CAACe,iBAAN,CAAwB,CAAER,OAAO,CAAEA,OAAX,CAAxB,CAAD,CAApB,CAEA;AACA,GAAMS,CAAAA,GAAG,CAAGC,OAAO,CAACD,GAAR,CAAYE,QAAxB,CAEA;AACA,GAAIF,GAAG,GAAK,aAAZ,CAA2B,cACNG,OAAO,CAAC,cAAD,CADD,CACjBC,MADiB,UACjBA,MADiB,CAEzBN,WAAW,CAACO,IAAZ,CAAiBD,MAAjB,EACD,CAED;AACA,GAAME,CAAAA,gBAAgB,CACpB,MAAOC,CAAAA,MAAP,GAAkB,QAAlB,EAA8BA,MAAM,CAACC,oCAArC,CACID,MAAM,CAACC,oCAAP,CAA4C,CAC1C;AAD0C,CAA5C,CADJ,CAIIzB,OALN,CAOA,GAAM0B,CAAAA,QAAQ,CAAGH,gBAAgB,CAACxB,eAAe,MAAf,QAAmBgB,WAAnB,CAAD,CAAjC,CAEA;AACA,GAAIY,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,YAAD,QAAkB/B,CAAAA,WAAW,CAACY,WAAD,CAAciB,QAAd,CAA7B,EAAZ,CAEA,cAAeC,CAAAA,KAAK,EAApB","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter } from \"connected-react-router\";\n\n// 리듀서를 가져올거예요.\nimport User from \"./modules/user\";\nimport  Post  from \"./modules/post\";\nimport Image from \"./modules/image\";\nimport Like from \"./modules/like\";\n\n// 브라우저 히스토리를 만듭니다.\nexport const history = createBrowserHistory();\n\n// 가져온 리듀서를 루트 리듀서로 묶어줍니다.\nconst rootReducer = combineReducers({\n  user: User,\n  post: Post,\n  image: Image,\n  like: Like,\n  router: connectRouter(history),\n});\n\n// 사용할 미들웨어를 여기에 넣어줍니다.\n// thunk에는 history를 넣어줄거예요. (중간 다리 역할을 하는 미들웨어에서도 페이지 이동을 할 수 있게 하려고!)\nconst middlewares = [thunk.withExtraArgument({ history: history })];\n\n// 지금이 어느 환경인 지 알려줘요. (개발환경, 프로덕션(배포)환경 ...)\nconst env = process.env.NODE_ENV;\n\n// 개발환경에서는 로거라는 걸 하나만 더 써볼게요.\nif (env === \"development\") {\n  const { logger } = require(\"redux-logger\");\n  middlewares.push(logger);\n}\n\n// redux devtools 익스텐션 사용 설정\nconst composeEnhancers =\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n// 스토어 만들기\nlet store = (initialStore) => createStore(rootReducer, enhancer);\n\nexport default store();\n"]},"metadata":{},"sourceType":"module"}