{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport firebase from \"firebase\";\nimport { actionCreators as postActions } from \"./post\";\nconst SET_LIKE = \"SET_LIKE\";\nconst ADD_LIKE = \"ADD_LIKE\";\nconst LOADING = \"LOADING\";\nconst setlike = createAction(SET_LIKE, (post_id, is_liked) => ({\n  post_id,\n  is_liked\n}));\nconst addlike = createAction(ADD_LIKE, (post_id, is_liked) => ({\n  post_id,\n  is_liked\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {}\n};\n\nconst getLikeFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {};\n};\n\nconst addLikeFB = (post_id, is_liked) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const likeDB = firestore.collection(\"like\");\n    const user_id = getState().user.user.uid;\n    let like = {\n      post_id: post_id,\n      user_id: user_id,\n      like: is_liked\n    };\n    likeDB.add(like).then(doc => {\n      const postDB = firestore.collection(\"post\");\n      const post = getState().post.list.find(l => l.id === post_id);\n      const increment = firebase.firestore.FieldValue.increment(1);\n      like = { ...like,\n        id: doc.id\n      };\n      postDB.doc(post_id).update({\n        like_cnt: increment\n      }).then(_post => {\n        dispatch(addlike(post_id, like));\n\n        if (post) {\n          dispatch(postActions.editPost(post_id, {\n            like_cnt: parseInt(post.like_cnt) + 1\n          }));\n        }\n      });\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_LIKE]: (state, action) => produce(state, draft => {\n    draft.list.is_liked = action.payload.is_liked;\n  }),\n  [ADD_LIKE]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id].push(action.payload.is_liked);\n    draft.is_liked = action.payload.is_liked;\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  setlike,\n  addlike,\n  addLikeFB,\n  getLikeFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/redux/modules/like.js"],"names":["createAction","handleActions","produce","firestore","firebase","actionCreators","postActions","SET_LIKE","ADD_LIKE","LOADING","setlike","post_id","is_liked","addlike","loading","is_loading","initialState","list","getLikeFB","dispatch","getState","history","addLikeFB","likeDB","collection","user_id","user","uid","like","add","then","doc","postDB","post","find","l","id","increment","FieldValue","update","like_cnt","_post","editPost","parseInt","state","action","draft","payload","push"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport firebase from \"firebase\";\nimport { actionCreators as postActions } from \"./post\";\n\nconst SET_LIKE = \"SET_LIKE\";\nconst ADD_LIKE = \"ADD_LIKE\";\nconst LOADING = \"LOADING\";\n\nconst setlike = createAction(SET_LIKE, (post_id, is_liked) => ({\n  post_id,\n  is_liked,\n}));\nconst addlike = createAction(ADD_LIKE, (post_id, is_liked) => ({\n  post_id,\n  is_liked,\n}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: {\n\n  },\n};\n\nconst getLikeFB = (post_id) => {\n  return function (dispatch, getState, { history }) {};\n};\n\nconst addLikeFB = (post_id, is_liked) => {\n  return function (dispatch, getState, { history }) {\n    const likeDB = firestore.collection(\"like\");\n    const user_id = getState().user.user.uid;\n\n    let like = {\n      post_id: post_id,\n      user_id: user_id,\n      like: is_liked,\n    };\n    likeDB.add(like).then((doc) => {\n      const postDB = firestore.collection(\"post\");\n      \n      const post = getState().post.list.find((l) => l.id === post_id);\n      \n      const increment = firebase.firestore.FieldValue.increment(1);\n      \n      like = { ...like, id: doc.id };\n\n      postDB\n        .doc(post_id)\n        .update({ like_cnt: increment })\n        .then((_post) => {\n          dispatch(addlike(post_id, like));\n          if (post) {\n            dispatch(\n              postActions.editPost(post_id, {\n                like_cnt: parseInt(post.like_cnt) + 1,\n              })\n            );\n          }\n        });\n    });\n  };\n};\n\nexport default handleActions(\n  {\n    [SET_LIKE]: (state, action) => produce(state, (draft) => {\n      draft.list.is_liked = action.payload.is_liked;\n    }),\n    [ADD_LIKE]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list[action.payload.post_id].push(action.payload.is_liked);\n        draft.is_liked = action.payload.is_liked;\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setlike,\n  addlike,\n  addLikeFB,\n  getLikeFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}