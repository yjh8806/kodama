{"ast":null,"code":"import React from\"react\";import{Grid,Image,Text,Button}from\"../elements\";import{HeartButton}from\"./index\";import EditIcon from\"@material-ui/icons/Edit\";import DeleteForeverIcon from\"@material-ui/icons/DeleteForever\";import{history}from\"../redux/configureStore\";import{useDispatch,useSelector}from\"react-redux\";import{actionCreators as postActions}from\"../redux/modules/post\";import{actionCreators as likeActions}from\"../redux/modules/like\";// 게시글 1개 뷰를 담당합니다.\n// layout_type에 따라 각각 타입에 맞는 레이아웃을 그려줄거예요.\n// layout_type : a, b, c\n//  - a : 텍스트가 위, 이미지가 아래인 레이아웃\n//  - b : 텍스트가 좌측, 이미지가 우측인 레이아웃\n//  - c : 텍스트가 우측, 이미지가 좌측인 레이아웃\n// image_url : 이미지 주소\n// like_cnt : 좋아요 갯수\n// insert_dt : 작성일시\n// user_info: 유저 정보 (딕셔너리 / user_name, user_id, user_profile를 가지고 있어요.)\n// is_me : 지금 로그인한 사용자가 작성자인지 아닌 지 판단해요.\n// id : 게시글 id\n// contents : 게시글 내용\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Post=/*#__PURE__*/React.memo(function(props){var dispatch=useDispatch();var list=useSelector(function(state){return state.like.list;});var user_info=props.user_info,image_url=props.image_url,contents=props.contents,like_cnt=props.like_cnt,insert_dt=props.insert_dt,id=props.id,layout=props.layout;React.useEffect(function(){dispatch(likeActions.getLikeFB(id));},[]);var deleteCheck=function deleteCheck(){var really=window.confirm(\"\\uC815\\uB9D0\\uB85C \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\\n\\uB2E4\\uC2DC \\uB418\\uB3CC\\uB9B4 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\");if(really===true){dispatch(likeActions.unLikeFB(props.id));window.alert(\"게시글 삭제 완료!\");// 시간 지연이 없으면, postDB의 객체 찾을 수 없다는 error!\nsetTimeout(function(){dispatch(postActions.deletePostFB(props.id));},500);}else{return;}};return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsxs(Grid,{children:[/*#__PURE__*/_jsxs(Grid,{is_flex:true,padding:\"16px\",children:[/*#__PURE__*/_jsxs(Grid,{is_flex:true,width:\"auto\",children:[/*#__PURE__*/_jsx(Image,{shape:\"circle\",src:props.src}),/*#__PURE__*/_jsx(Text,{bold:true,children:props.user_info.user_name})]}),/*#__PURE__*/_jsxs(Grid,{is_flex:true,width:\"auto\",children:[/*#__PURE__*/_jsx(Text,{children:props.insert_dt}),props.is_me&&/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(Button,{width:\"auto\",margin:\"0em 0em 0em 0.5em\",padding:\"4px\",border:\"1px solid white\",_onClick:function _onClick(e){//  이벤트 캡쳐링과 버블링을 막아요!\n// 이벤트 캡쳐링, 버블링이 뭔지 검색해보기! :)\ne.preventDefault();e.stopPropagation();history.push(\"/write/\".concat(props.id));},children:/*#__PURE__*/_jsx(EditIcon,{})}),/*#__PURE__*/_jsx(Button,{width:\"auto\",margin:\"0em 0em 0em 0em\",padding:\"4px\",border:\"1px solid white\",_onClick:function _onClick(e){//  이벤트 캡쳐링과 버블링을 막아요!\n// 이벤트 캡쳐링, 버블링이 뭔지 검색해보기! :)\ne.preventDefault();e.stopPropagation();// 게시글 삭제하기\n// 여기에서는 window.confirm 등을 사용해서 진짜 지우냐고 한 번 더 물어봐주면 정말 좋겠죠!\ndeleteCheck();},children:/*#__PURE__*/_jsx(DeleteForeverIcon,{})})]})]})]}),props.layout_type===\"a\"&&/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Grid,{children:/*#__PURE__*/_jsx(Image,{shape:\"AboveTxtBeneathImg\",width:\"20em\",height:\"20em\",contents:props.contents,src:props.image_url,_onClick:function _onClick(){history.push(\"/post/\".concat(props.id));}})})}),props.layout_type===\"b\"&&/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Grid,{is_flex:true,margin:\"2em 0em 1em 0em\",children:/*#__PURE__*/_jsx(Image,{is_flex:true,shape:\"leftTxtRightImg\",contents:props.contents,src:props.image_url,_onClick:function _onClick(){history.push(\"/post/\".concat(props.id));}})})}),props.layout_type===\"c\"&&/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Grid,{is_flex:true,children:/*#__PURE__*/_jsx(Image,{is_flex:true,shape:\"leftImgRightTxt\",contents:props.contents,src:props.image_url,_onClick:function _onClick(){history.push(\"/post/\".concat(props.id));}})})}),/*#__PURE__*/_jsxs(Grid,{is_flex:true,padding:\"16px\",children:[/*#__PURE__*/_jsxs(Text,{margin:\"0px\",bold:true,children:[\"\\uC88B\\uC544\\uC694 \",props.like_cnt,\"\\uAC1C\"]}),/*#__PURE__*/_jsx(HeartButton,{post_id:props.id})]})]})});});Post.defaultProps={id:null,user_info:{user_id:\"\",user_name:\"\",user_profile:\"\"},image_url:\"\",contents:\"\",like_cnt:10,layout_type:\"a\",insert_dt:\"2021-02-27 10:00:00\",is_me:false};export default Post;","map":{"version":3,"sources":["/Users/frankie/sparta/hanghae_react/magazine_test/src/components/Post.js"],"names":["React","Grid","Image","Text","Button","HeartButton","EditIcon","DeleteForeverIcon","history","useDispatch","useSelector","actionCreators","postActions","likeActions","Post","memo","props","dispatch","list","state","like","user_info","image_url","contents","like_cnt","insert_dt","id","layout","useEffect","getLikeFB","deleteCheck","really","window","confirm","unLikeFB","alert","setTimeout","deletePostFB","src","user_name","is_me","e","preventDefault","stopPropagation","push","layout_type","defaultProps","user_id","user_profile"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid, Image, Text, Button } from \"../elements\";\nimport { HeartButton } from \"./index\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\n\nimport { history } from \"../redux/configureStore\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport { actionCreators as likeActions } from \"../redux/modules/like\";\n\n// 게시글 1개 뷰를 담당합니다.\n// layout_type에 따라 각각 타입에 맞는 레이아웃을 그려줄거예요.\n// layout_type : a, b, c\n//  - a : 텍스트가 위, 이미지가 아래인 레이아웃\n//  - b : 텍스트가 좌측, 이미지가 우측인 레이아웃\n//  - c : 텍스트가 우측, 이미지가 좌측인 레이아웃\n// image_url : 이미지 주소\n// like_cnt : 좋아요 갯수\n// insert_dt : 작성일시\n// user_info: 유저 정보 (딕셔너리 / user_name, user_id, user_profile를 가지고 있어요.)\n// is_me : 지금 로그인한 사용자가 작성자인지 아닌 지 판단해요.\n// id : 게시글 id\n// contents : 게시글 내용\nconst Post = React.memo((props) => {\n  const dispatch = useDispatch();\n  const list = useSelector((state) => state.like.list);\n  const { user_info, image_url, contents, like_cnt, insert_dt, id, layout } =\n    props;\n    \n  React.useEffect(() => {\n    dispatch(likeActions.getLikeFB(id));\n  }, []);\n\n  const deleteCheck = () => {\n    const really = window.confirm(\n      `정말로 삭제하시겠습니까?\\n다시 되돌릴 수 없습니다.`\n    );\n    if (really === true) {\n      dispatch(likeActions.unLikeFB(props.id));\n      window.alert(\"게시글 삭제 완료!\");\n      // 시간 지연이 없으면, postDB의 객체 찾을 수 없다는 error!\n      setTimeout(() => {\n        dispatch(postActions.deletePostFB(props.id));\n      }, 500);\n    } else {\n      return;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Grid>\n        <Grid is_flex padding=\"16px\">\n          <Grid is_flex width=\"auto\">\n            <Image shape=\"circle\" src={props.src} />\n            <Text bold>{props.user_info.user_name}</Text>\n          </Grid>\n          <Grid is_flex width=\"auto\">\n            <Text>{props.insert_dt}</Text>\n            {props.is_me && (\n              <React.Fragment>\n                <Button\n                  width=\"auto\"\n                  margin=\"0em 0em 0em 0.5em\"\n                  padding=\"4px\"\n                  border=\"1px solid white\"\n                  _onClick={(e) => {\n                    //  이벤트 캡쳐링과 버블링을 막아요!\n                    // 이벤트 캡쳐링, 버블링이 뭔지 검색해보기! :)\n                    e.preventDefault();\n                    e.stopPropagation();\n                    history.push(`/write/${props.id}`);\n                  }}\n                >\n                  <EditIcon />\n                </Button>\n                <Button\n                  width=\"auto\"\n                  margin=\"0em 0em 0em 0em\"\n                  padding=\"4px\"\n                  border=\"1px solid white\"\n                  _onClick={(e) => {\n                    //  이벤트 캡쳐링과 버블링을 막아요!\n                    // 이벤트 캡쳐링, 버블링이 뭔지 검색해보기! :)\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    // 게시글 삭제하기\n                    // 여기에서는 window.confirm 등을 사용해서 진짜 지우냐고 한 번 더 물어봐주면 정말 좋겠죠!\n                    deleteCheck();\n                  }}\n                >\n                  <DeleteForeverIcon />\n                </Button>\n              </React.Fragment>\n            )}\n          </Grid>\n        </Grid>\n\n        {/* layout type이 a일 때 */}\n        {props.layout_type === \"a\" && (\n          <React.Fragment>\n            <Grid>\n              {/* <Text>{props.contents}</Text>\n            </Grid>\n            <Grid>\n              <Image shape=\"rectangle\" src={props.image_url} /> */}\n              <Image\n                shape=\"AboveTxtBeneathImg\"\n                width=\"20em\"\n                height=\"20em\"\n                contents={props.contents}\n                src={props.image_url}\n                _onClick={() => {\n                  history.push(`/post/${props.id}`);\n                }}\n              />\n            </Grid>\n          </React.Fragment>\n        )}\n\n        {/* layout type이 b일 때 */}\n        {props.layout_type === \"b\" && (\n          <React.Fragment>\n            <Grid is_flex margin=\"2em 0em 1em 0em\">\n              <Image\n                is_flex\n                shape=\"leftTxtRightImg\"\n                contents={props.contents}\n                src={props.image_url}\n                _onClick={() => {\n                  history.push(`/post/${props.id}`);\n                }}\n              />\n            </Grid>\n          </React.Fragment>\n        )}\n\n        {/* layout type이 c일 때 */}\n        {props.layout_type === \"c\" && (\n          <React.Fragment>\n            <Grid is_flex>\n              {/* <Image shape=\"rectangle\" src={props.image_url} />\n              <Grid width=\"50%\" padding=\"16px\">\n                <Text>{props.contents}</Text>\n              </Grid> */}\n              <Image\n                is_flex\n                shape=\"leftImgRightTxt\"\n                contents={props.contents}\n                src={props.image_url}\n                _onClick={() => {\n                  history.push(`/post/${props.id}`);\n                }}\n              />\n            </Grid>\n          </React.Fragment>\n        )}\n\n        <Grid is_flex padding=\"16px\">\n          <Text margin=\"0px\" bold>\n            좋아요 {props.like_cnt}개\n          </Text>\n          <HeartButton post_id={props.id} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n});\n\nPost.defaultProps = {\n  id: null,\n  user_info: {\n    user_id: \"\",\n    user_name: \"\",\n    user_profile: \"\",\n  },\n  image_url: \"\",\n  contents: \"\",\n  like_cnt: 10,\n  layout_type: \"a\",\n  insert_dt: \"2021-02-27 10:00:00\",\n  is_me: false,\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}